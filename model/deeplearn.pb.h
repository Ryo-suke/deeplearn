// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deeplearn.proto

#ifndef PROTOBUF_deeplearn_2eproto__INCLUDED
#define PROTOBUF_deeplearn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace model {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_deeplearn_2eproto();
void protobuf_AssignDesc_deeplearn_2eproto();
void protobuf_ShutdownFile_deeplearn_2eproto();

class Hyperparams;
class NodeData;
class EdgeData;
class SpnData;
class ModelData;
class Operation;
class Operation_StopCondition;
class DatasetInfo;
class DatasetInfo_Data;

enum Hyperparams_Decay {
  Hyperparams_Decay_NONE = 0,
  Hyperparams_Decay_INVERSE_T = 1,
  Hyperparams_Decay_EXPONENTIAL = 2
};
bool Hyperparams_Decay_IsValid(int value);
const Hyperparams_Decay Hyperparams_Decay_Decay_MIN = Hyperparams_Decay_NONE;
const Hyperparams_Decay Hyperparams_Decay_Decay_MAX = Hyperparams_Decay_EXPONENTIAL;
const int Hyperparams_Decay_Decay_ARRAYSIZE = Hyperparams_Decay_Decay_MAX + 1;

const ::google::protobuf::EnumDescriptor* Hyperparams_Decay_descriptor();
inline const ::std::string& Hyperparams_Decay_Name(Hyperparams_Decay value) {
  return ::google::protobuf::internal::NameOfEnum(
    Hyperparams_Decay_descriptor(), value);
}
inline bool Hyperparams_Decay_Parse(
    const ::std::string& name, Hyperparams_Decay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Hyperparams_Decay>(
    Hyperparams_Decay_descriptor(), name, value);
}
enum NodeData_NodeType {
  NodeData_NodeType_INPUT = 0,
  NodeData_NodeType_HIDDEN = 1,
  NodeData_NodeType_QUERY = 2,
  NodeData_NodeType_PRODUCT = 3,
  NodeData_NodeType_SUM = 4,
  NodeData_NodeType_MAX = 5
};
bool NodeData_NodeType_IsValid(int value);
const NodeData_NodeType NodeData_NodeType_NodeType_MIN = NodeData_NodeType_INPUT;
const NodeData_NodeType NodeData_NodeType_NodeType_MAX = NodeData_NodeType_MAX;
const int NodeData_NodeType_NodeType_ARRAYSIZE = NodeData_NodeType_NodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeData_NodeType_descriptor();
inline const ::std::string& NodeData_NodeType_Name(NodeData_NodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeData_NodeType_descriptor(), value);
}
inline bool NodeData_NodeType_Parse(
    const ::std::string& name, NodeData_NodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeData_NodeType>(
    NodeData_NodeType_descriptor(), name, value);
}
enum ModelData_ModelType {
  ModelData_ModelType_SPN = 0
};
bool ModelData_ModelType_IsValid(int value);
const ModelData_ModelType ModelData_ModelType_ModelType_MIN = ModelData_ModelType_SPN;
const ModelData_ModelType ModelData_ModelType_ModelType_MAX = ModelData_ModelType_SPN;
const int ModelData_ModelType_ModelType_ARRAYSIZE = ModelData_ModelType_ModelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModelData_ModelType_descriptor();
inline const ::std::string& ModelData_ModelType_Name(ModelData_ModelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModelData_ModelType_descriptor(), value);
}
inline bool ModelData_ModelType_Parse(
    const ::std::string& name, ModelData_ModelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModelData_ModelType>(
    ModelData_ModelType_descriptor(), name, value);
}
enum Operation_Optimizer {
  Operation_Optimizer_GRADIENT_DESCENT = 0,
  Operation_Optimizer_HARD_GRADIENT_DESCENT = 1,
  Operation_Optimizer_EM = 2,
  Operation_Optimizer_HARD_EM = 3,
  Operation_Optimizer_CD = 4,
  Operation_Optimizer_PCD = 5
};
bool Operation_Optimizer_IsValid(int value);
const Operation_Optimizer Operation_Optimizer_Optimizer_MIN = Operation_Optimizer_GRADIENT_DESCENT;
const Operation_Optimizer Operation_Optimizer_Optimizer_MAX = Operation_Optimizer_PCD;
const int Operation_Optimizer_Optimizer_ARRAYSIZE = Operation_Optimizer_Optimizer_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_Optimizer_descriptor();
inline const ::std::string& Operation_Optimizer_Name(Operation_Optimizer value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_Optimizer_descriptor(), value);
}
inline bool Operation_Optimizer_Parse(
    const ::std::string& name, Operation_Optimizer* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Optimizer>(
    Operation_Optimizer_descriptor(), name, value);
}
enum Operation_OperationType {
  Operation_OperationType_TRAIN = 0,
  Operation_OperationType_TEST = 1
};
bool Operation_OperationType_IsValid(int value);
const Operation_OperationType Operation_OperationType_OperationType_MIN = Operation_OperationType_TRAIN;
const Operation_OperationType Operation_OperationType_OperationType_MAX = Operation_OperationType_TEST;
const int Operation_OperationType_OperationType_ARRAYSIZE = Operation_OperationType_OperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_OperationType_descriptor();
inline const ::std::string& Operation_OperationType_Name(Operation_OperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_OperationType_descriptor(), value);
}
inline bool Operation_OperationType_Parse(
    const ::std::string& name, Operation_OperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_OperationType>(
    Operation_OperationType_descriptor(), name, value);
}
enum DatasetInfo_Data_DataType {
  DatasetInfo_Data_DataType_TRAIN_SET = 0,
  DatasetInfo_Data_DataType_EVAL_SET = 1,
  DatasetInfo_Data_DataType_TEST_SET = 2
};
bool DatasetInfo_Data_DataType_IsValid(int value);
const DatasetInfo_Data_DataType DatasetInfo_Data_DataType_DataType_MIN = DatasetInfo_Data_DataType_TRAIN_SET;
const DatasetInfo_Data_DataType DatasetInfo_Data_DataType_DataType_MAX = DatasetInfo_Data_DataType_TEST_SET;
const int DatasetInfo_Data_DataType_DataType_ARRAYSIZE = DatasetInfo_Data_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DatasetInfo_Data_DataType_descriptor();
inline const ::std::string& DatasetInfo_Data_DataType_Name(DatasetInfo_Data_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DatasetInfo_Data_DataType_descriptor(), value);
}
inline bool DatasetInfo_Data_DataType_Parse(
    const ::std::string& name, DatasetInfo_Data_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatasetInfo_Data_DataType>(
    DatasetInfo_Data_DataType_descriptor(), name, value);
}
// ===================================================================

class Hyperparams : public ::google::protobuf::Message {
 public:
  Hyperparams();
  virtual ~Hyperparams();

  Hyperparams(const Hyperparams& from);

  inline Hyperparams& operator=(const Hyperparams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hyperparams& default_instance();

  void Swap(Hyperparams* other);

  // implements Message ----------------------------------------------

  Hyperparams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Hyperparams& from);
  void MergeFrom(const Hyperparams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Hyperparams_Decay Decay;
  static const Decay NONE = Hyperparams_Decay_NONE;
  static const Decay INVERSE_T = Hyperparams_Decay_INVERSE_T;
  static const Decay EXPONENTIAL = Hyperparams_Decay_EXPONENTIAL;
  static inline bool Decay_IsValid(int value) {
    return Hyperparams_Decay_IsValid(value);
  }
  static const Decay Decay_MIN =
    Hyperparams_Decay_Decay_MIN;
  static const Decay Decay_MAX =
    Hyperparams_Decay_Decay_MAX;
  static const int Decay_ARRAYSIZE =
    Hyperparams_Decay_Decay_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Decay_descriptor() {
    return Hyperparams_Decay_descriptor();
  }
  static inline const ::std::string& Decay_Name(Decay value) {
    return Hyperparams_Decay_Name(value);
  }
  static inline bool Decay_Parse(const ::std::string& name,
      Decay* value) {
    return Hyperparams_Decay_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float base_learningrate = 1 [default = 0.01];
  inline bool has_base_learningrate() const;
  inline void clear_base_learningrate();
  static const int kBaseLearningrateFieldNumber = 1;
  inline float base_learningrate() const;
  inline void set_base_learningrate(float value);

  // optional .model.Hyperparams.Decay learningrate_decay = 2 [default = NONE];
  inline bool has_learningrate_decay() const;
  inline void clear_learningrate_decay();
  static const int kLearningrateDecayFieldNumber = 2;
  inline ::model::Hyperparams_Decay learningrate_decay() const;
  inline void set_learningrate_decay(::model::Hyperparams_Decay value);

  // optional int32 learningrate_decay_half_life = 3 [default = 1000];
  inline bool has_learningrate_decay_half_life() const;
  inline void clear_learningrate_decay_half_life();
  static const int kLearningrateDecayHalfLifeFieldNumber = 3;
  inline ::google::protobuf::int32 learningrate_decay_half_life() const;
  inline void set_learningrate_decay_half_life(::google::protobuf::int32 value);

  // optional float initial_momentum = 4 [default = 0];
  inline bool has_initial_momentum() const;
  inline void clear_initial_momentum();
  static const int kInitialMomentumFieldNumber = 4;
  inline float initial_momentum() const;
  inline void set_initial_momentum(float value);

  // optional float final_momentum = 5 [default = 0];
  inline bool has_final_momentum() const;
  inline void clear_final_momentum();
  static const int kFinalMomentumFieldNumber = 5;
  inline float final_momentum() const;
  inline void set_final_momentum(float value);

  // optional int32 momentum_change_steps = 6 [default = 10];
  inline bool has_momentum_change_steps() const;
  inline void clear_momentum_change_steps();
  static const int kMomentumChangeStepsFieldNumber = 6;
  inline ::google::protobuf::int32 momentum_change_steps() const;
  inline void set_momentum_change_steps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:model.Hyperparams)
 private:
  inline void set_has_base_learningrate();
  inline void clear_has_base_learningrate();
  inline void set_has_learningrate_decay();
  inline void clear_has_learningrate_decay();
  inline void set_has_learningrate_decay_half_life();
  inline void clear_has_learningrate_decay_half_life();
  inline void set_has_initial_momentum();
  inline void clear_has_initial_momentum();
  inline void set_has_final_momentum();
  inline void clear_has_final_momentum();
  inline void set_has_momentum_change_steps();
  inline void clear_has_momentum_change_steps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float base_learningrate_;
  int learningrate_decay_;
  ::google::protobuf::int32 learningrate_decay_half_life_;
  float initial_momentum_;
  float final_momentum_;
  ::google::protobuf::int32 momentum_change_steps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static Hyperparams* default_instance_;
};
// -------------------------------------------------------------------

class NodeData : public ::google::protobuf::Message {
 public:
  NodeData();
  virtual ~NodeData();

  NodeData(const NodeData& from);

  inline NodeData& operator=(const NodeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeData& default_instance();

  void Swap(NodeData* other);

  // implements Message ----------------------------------------------

  NodeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeData& from);
  void MergeFrom(const NodeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NodeData_NodeType NodeType;
  static const NodeType INPUT = NodeData_NodeType_INPUT;
  static const NodeType HIDDEN = NodeData_NodeType_HIDDEN;
  static const NodeType QUERY = NodeData_NodeType_QUERY;
  static const NodeType PRODUCT = NodeData_NodeType_PRODUCT;
  static const NodeType SUM = NodeData_NodeType_SUM;
  static const NodeType MAX = NodeData_NodeType_MAX;
  static inline bool NodeType_IsValid(int value) {
    return NodeData_NodeType_IsValid(value);
  }
  static const NodeType NodeType_MIN =
    NodeData_NodeType_NodeType_MIN;
  static const NodeType NodeType_MAX =
    NodeData_NodeType_NodeType_MAX;
  static const int NodeType_ARRAYSIZE =
    NodeData_NodeType_NodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeType_descriptor() {
    return NodeData_NodeType_descriptor();
  }
  static inline const ::std::string& NodeType_Name(NodeType value) {
    return NodeData_NodeType_Name(value);
  }
  static inline bool NodeType_Parse(const ::std::string& name,
      NodeType* value) {
    return NodeData_NodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .model.NodeData.NodeType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::model::NodeData_NodeType type() const;
  inline void set_type(::model::NodeData_NodeType value);

  // required int32 dimension = 3;
  inline bool has_dimension() const;
  inline void clear_dimension();
  static const int kDimensionFieldNumber = 3;
  inline ::google::protobuf::int32 dimension() const;
  inline void set_dimension(::google::protobuf::int32 value);

  // optional int32 input_start_index = 4;
  inline bool has_input_start_index() const;
  inline void clear_input_start_index();
  static const int kInputStartIndexFieldNumber = 4;
  inline ::google::protobuf::int32 input_start_index() const;
  inline void set_input_start_index(::google::protobuf::int32 value);

  // optional bytes bias = 5;
  inline bool has_bias() const;
  inline void clear_bias();
  static const int kBiasFieldNumber = 5;
  inline const ::std::string& bias() const;
  inline void set_bias(const ::std::string& value);
  inline void set_bias(const char* value);
  inline void set_bias(const void* value, size_t size);
  inline ::std::string* mutable_bias();
  inline ::std::string* release_bias();
  inline void set_allocated_bias(::std::string* bias);

  // optional .model.Hyperparams hyper_params = 6;
  inline bool has_hyper_params() const;
  inline void clear_hyper_params();
  static const int kHyperParamsFieldNumber = 6;
  inline const ::model::Hyperparams& hyper_params() const;
  inline ::model::Hyperparams* mutable_hyper_params();
  inline ::model::Hyperparams* release_hyper_params();
  inline void set_allocated_hyper_params(::model::Hyperparams* hyper_params);

  // @@protoc_insertion_point(class_scope:model.NodeData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dimension();
  inline void clear_has_dimension();
  inline void set_has_input_start_index();
  inline void clear_has_input_start_index();
  inline void set_has_bias();
  inline void clear_has_bias();
  inline void set_has_hyper_params();
  inline void clear_has_hyper_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  ::google::protobuf::int32 dimension_;
  ::std::string* bias_;
  ::model::Hyperparams* hyper_params_;
  ::google::protobuf::int32 input_start_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static NodeData* default_instance_;
};
// -------------------------------------------------------------------

class EdgeData : public ::google::protobuf::Message {
 public:
  EdgeData();
  virtual ~EdgeData();

  EdgeData(const EdgeData& from);

  inline EdgeData& operator=(const EdgeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EdgeData& default_instance();

  void Swap(EdgeData* other);

  // implements Message ----------------------------------------------

  EdgeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EdgeData& from);
  void MergeFrom(const EdgeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool directed = 1 [default = true];
  inline bool has_directed() const;
  inline void clear_directed();
  static const int kDirectedFieldNumber = 1;
  inline bool directed() const;
  inline void set_directed(bool value);

  // optional bytes weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline const ::std::string& weight() const;
  inline void set_weight(const ::std::string& value);
  inline void set_weight(const char* value);
  inline void set_weight(const void* value, size_t size);
  inline ::std::string* mutable_weight();
  inline ::std::string* release_weight();
  inline void set_allocated_weight(::std::string* weight);

  // optional string node1 = 3;
  inline bool has_node1() const;
  inline void clear_node1();
  static const int kNode1FieldNumber = 3;
  inline const ::std::string& node1() const;
  inline void set_node1(const ::std::string& value);
  inline void set_node1(const char* value);
  inline void set_node1(const char* value, size_t size);
  inline ::std::string* mutable_node1();
  inline ::std::string* release_node1();
  inline void set_allocated_node1(::std::string* node1);

  // optional string node2 = 4;
  inline bool has_node2() const;
  inline void clear_node2();
  static const int kNode2FieldNumber = 4;
  inline const ::std::string& node2() const;
  inline void set_node2(const ::std::string& value);
  inline void set_node2(const char* value);
  inline void set_node2(const char* value, size_t size);
  inline ::std::string* mutable_node2();
  inline ::std::string* release_node2();
  inline void set_allocated_node2(::std::string* node2);

  // optional .model.Hyperparams hyper_params = 5;
  inline bool has_hyper_params() const;
  inline void clear_hyper_params();
  static const int kHyperParamsFieldNumber = 5;
  inline const ::model::Hyperparams& hyper_params() const;
  inline ::model::Hyperparams* mutable_hyper_params();
  inline ::model::Hyperparams* release_hyper_params();
  inline void set_allocated_hyper_params(::model::Hyperparams* hyper_params);

  // @@protoc_insertion_point(class_scope:model.EdgeData)
 private:
  inline void set_has_directed();
  inline void clear_has_directed();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_node1();
  inline void clear_has_node1();
  inline void set_has_node2();
  inline void clear_has_node2();
  inline void set_has_hyper_params();
  inline void clear_has_hyper_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* weight_;
  ::std::string* node1_;
  ::std::string* node2_;
  ::model::Hyperparams* hyper_params_;
  bool directed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static EdgeData* default_instance_;
};
// -------------------------------------------------------------------

class SpnData : public ::google::protobuf::Message {
 public:
  SpnData();
  virtual ~SpnData();

  SpnData(const SpnData& from);

  inline SpnData& operator=(const SpnData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpnData& default_instance();

  void Swap(SpnData* other);

  // implements Message ----------------------------------------------

  SpnData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpnData& from);
  void MergeFrom(const SpnData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string node_list = 1;
  inline bool has_node_list() const;
  inline void clear_node_list();
  static const int kNodeListFieldNumber = 1;
  inline const ::std::string& node_list() const;
  inline void set_node_list(const ::std::string& value);
  inline void set_node_list(const char* value);
  inline void set_node_list(const char* value, size_t size);
  inline ::std::string* mutable_node_list();
  inline ::std::string* release_node_list();
  inline void set_allocated_node_list(::std::string* node_list);

  // optional string adjacency_matrix = 2;
  inline bool has_adjacency_matrix() const;
  inline void clear_adjacency_matrix();
  static const int kAdjacencyMatrixFieldNumber = 2;
  inline const ::std::string& adjacency_matrix() const;
  inline void set_adjacency_matrix(const ::std::string& value);
  inline void set_adjacency_matrix(const char* value);
  inline void set_adjacency_matrix(const char* value, size_t size);
  inline ::std::string* mutable_adjacency_matrix();
  inline ::std::string* release_adjacency_matrix();
  inline void set_allocated_adjacency_matrix(::std::string* adjacency_matrix);

  // optional string input_indices = 3;
  inline bool has_input_indices() const;
  inline void clear_input_indices();
  static const int kInputIndicesFieldNumber = 3;
  inline const ::std::string& input_indices() const;
  inline void set_input_indices(const ::std::string& value);
  inline void set_input_indices(const char* value);
  inline void set_input_indices(const char* value, size_t size);
  inline ::std::string* mutable_input_indices();
  inline ::std::string* release_input_indices();
  inline void set_allocated_input_indices(::std::string* input_indices);

  // @@protoc_insertion_point(class_scope:model.SpnData)
 private:
  inline void set_has_node_list();
  inline void clear_has_node_list();
  inline void set_has_adjacency_matrix();
  inline void clear_has_adjacency_matrix();
  inline void set_has_input_indices();
  inline void clear_has_input_indices();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* node_list_;
  ::std::string* adjacency_matrix_;
  ::std::string* input_indices_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static SpnData* default_instance_;
};
// -------------------------------------------------------------------

class ModelData : public ::google::protobuf::Message {
 public:
  ModelData();
  virtual ~ModelData();

  ModelData(const ModelData& from);

  inline ModelData& operator=(const ModelData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelData& default_instance();

  void Swap(ModelData* other);

  // implements Message ----------------------------------------------

  ModelData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelData& from);
  void MergeFrom(const ModelData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModelData_ModelType ModelType;
  static const ModelType SPN = ModelData_ModelType_SPN;
  static inline bool ModelType_IsValid(int value) {
    return ModelData_ModelType_IsValid(value);
  }
  static const ModelType ModelType_MIN =
    ModelData_ModelType_ModelType_MIN;
  static const ModelType ModelType_MAX =
    ModelData_ModelType_ModelType_MAX;
  static const int ModelType_ARRAYSIZE =
    ModelData_ModelType_ModelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ModelType_descriptor() {
    return ModelData_ModelType_descriptor();
  }
  static inline const ::std::string& ModelType_Name(ModelType value) {
    return ModelData_ModelType_Name(value);
  }
  static inline bool ModelType_Parse(const ::std::string& name,
      ModelType* value) {
    return ModelData_ModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .model.ModelData.ModelType model_type = 2;
  inline bool has_model_type() const;
  inline void clear_model_type();
  static const int kModelTypeFieldNumber = 2;
  inline ::model::ModelData_ModelType model_type() const;
  inline void set_model_type(::model::ModelData_ModelType value);

  // optional .model.SpnData spn_data = 3;
  inline bool has_spn_data() const;
  inline void clear_spn_data();
  static const int kSpnDataFieldNumber = 3;
  inline const ::model::SpnData& spn_data() const;
  inline ::model::SpnData* mutable_spn_data();
  inline ::model::SpnData* release_spn_data();
  inline void set_allocated_spn_data(::model::SpnData* spn_data);

  // optional .model.Hyperparams hyper_params = 4;
  inline bool has_hyper_params() const;
  inline void clear_hyper_params();
  static const int kHyperParamsFieldNumber = 4;
  inline const ::model::Hyperparams& hyper_params() const;
  inline ::model::Hyperparams* mutable_hyper_params();
  inline ::model::Hyperparams* release_hyper_params();
  inline void set_allocated_hyper_params(::model::Hyperparams* hyper_params);

  // repeated .model.NodeData nodes = 5;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 5;
  inline const ::model::NodeData& nodes(int index) const;
  inline ::model::NodeData* mutable_nodes(int index);
  inline ::model::NodeData* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::model::NodeData >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::model::NodeData >*
      mutable_nodes();

  // repeated .model.EdgeData edges = 6;
  inline int edges_size() const;
  inline void clear_edges();
  static const int kEdgesFieldNumber = 6;
  inline const ::model::EdgeData& edges(int index) const;
  inline ::model::EdgeData* mutable_edges(int index);
  inline ::model::EdgeData* add_edges();
  inline const ::google::protobuf::RepeatedPtrField< ::model::EdgeData >&
      edges() const;
  inline ::google::protobuf::RepeatedPtrField< ::model::EdgeData >*
      mutable_edges();

  // @@protoc_insertion_point(class_scope:model.ModelData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_model_type();
  inline void clear_has_model_type();
  inline void set_has_spn_data();
  inline void clear_has_spn_data();
  inline void set_has_hyper_params();
  inline void clear_has_hyper_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::model::SpnData* spn_data_;
  ::model::Hyperparams* hyper_params_;
  ::google::protobuf::RepeatedPtrField< ::model::NodeData > nodes_;
  ::google::protobuf::RepeatedPtrField< ::model::EdgeData > edges_;
  int model_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static ModelData* default_instance_;
};
// -------------------------------------------------------------------

class Operation_StopCondition : public ::google::protobuf::Message {
 public:
  Operation_StopCondition();
  virtual ~Operation_StopCondition();

  Operation_StopCondition(const Operation_StopCondition& from);

  inline Operation_StopCondition& operator=(const Operation_StopCondition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation_StopCondition& default_instance();

  void Swap(Operation_StopCondition* other);

  // implements Message ----------------------------------------------

  Operation_StopCondition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation_StopCondition& from);
  void MergeFrom(const Operation_StopCondition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool all_processed = 1 [default = true];
  inline bool has_all_processed() const;
  inline void clear_all_processed();
  static const int kAllProcessedFieldNumber = 1;
  inline bool all_processed() const;
  inline void set_all_processed(bool value);

  // optional int32 steps = 2 [default = 10000];
  inline bool has_steps() const;
  inline void clear_steps();
  static const int kStepsFieldNumber = 2;
  inline ::google::protobuf::int32 steps() const;
  inline void set_steps(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:model.Operation.StopCondition)
 private:
  inline void set_has_all_processed();
  inline void clear_has_all_processed();
  inline void set_has_steps();
  inline void clear_has_steps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool all_processed_;
  ::google::protobuf::int32 steps_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static Operation_StopCondition* default_instance_;
};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();

  void Swap(Operation* other);

  // implements Message ----------------------------------------------

  Operation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Operation_StopCondition StopCondition;

  typedef Operation_Optimizer Optimizer;
  static const Optimizer GRADIENT_DESCENT = Operation_Optimizer_GRADIENT_DESCENT;
  static const Optimizer HARD_GRADIENT_DESCENT = Operation_Optimizer_HARD_GRADIENT_DESCENT;
  static const Optimizer EM = Operation_Optimizer_EM;
  static const Optimizer HARD_EM = Operation_Optimizer_HARD_EM;
  static const Optimizer CD = Operation_Optimizer_CD;
  static const Optimizer PCD = Operation_Optimizer_PCD;
  static inline bool Optimizer_IsValid(int value) {
    return Operation_Optimizer_IsValid(value);
  }
  static const Optimizer Optimizer_MIN =
    Operation_Optimizer_Optimizer_MIN;
  static const Optimizer Optimizer_MAX =
    Operation_Optimizer_Optimizer_MAX;
  static const int Optimizer_ARRAYSIZE =
    Operation_Optimizer_Optimizer_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Optimizer_descriptor() {
    return Operation_Optimizer_descriptor();
  }
  static inline const ::std::string& Optimizer_Name(Optimizer value) {
    return Operation_Optimizer_Name(value);
  }
  static inline bool Optimizer_Parse(const ::std::string& name,
      Optimizer* value) {
    return Operation_Optimizer_Parse(name, value);
  }

  typedef Operation_OperationType OperationType;
  static const OperationType TRAIN = Operation_OperationType_TRAIN;
  static const OperationType TEST = Operation_OperationType_TEST;
  static inline bool OperationType_IsValid(int value) {
    return Operation_OperationType_IsValid(value);
  }
  static const OperationType OperationType_MIN =
    Operation_OperationType_OperationType_MIN;
  static const OperationType OperationType_MAX =
    Operation_OperationType_OperationType_MAX;
  static const int OperationType_ARRAYSIZE =
    Operation_OperationType_OperationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperationType_descriptor() {
    return Operation_OperationType_descriptor();
  }
  static inline const ::std::string& OperationType_Name(OperationType value) {
    return Operation_OperationType_Name(value);
  }
  static inline bool OperationType_Parse(const ::std::string& name,
      OperationType* value) {
    return Operation_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1 [default = "operation"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .model.Operation.Optimizer optimizer = 2 [default = GRADIENT_DESCENT];
  inline bool has_optimizer() const;
  inline void clear_optimizer();
  static const int kOptimizerFieldNumber = 2;
  inline ::model::Operation_Optimizer optimizer() const;
  inline void set_optimizer(::model::Operation_Optimizer value);

  // optional .model.Operation.StopCondition stop_condition = 3;
  inline bool has_stop_condition() const;
  inline void clear_stop_condition();
  static const int kStopConditionFieldNumber = 3;
  inline const ::model::Operation_StopCondition& stop_condition() const;
  inline ::model::Operation_StopCondition* mutable_stop_condition();
  inline ::model::Operation_StopCondition* release_stop_condition();
  inline void set_allocated_stop_condition(::model::Operation_StopCondition* stop_condition);

  // optional .model.Operation.OperationType operation_type = 4 [default = TRAIN];
  inline bool has_operation_type() const;
  inline void clear_operation_type();
  static const int kOperationTypeFieldNumber = 4;
  inline ::model::Operation_OperationType operation_type() const;
  inline void set_operation_type(::model::Operation_OperationType value);

  // optional int32 batch_size = 5 [default = 100];
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 5;
  inline ::google::protobuf::int32 batch_size() const;
  inline void set_batch_size(::google::protobuf::int32 value);

  // optional string data_proto = 6;
  inline bool has_data_proto() const;
  inline void clear_data_proto();
  static const int kDataProtoFieldNumber = 6;
  inline const ::std::string& data_proto() const;
  inline void set_data_proto(const ::std::string& value);
  inline void set_data_proto(const char* value);
  inline void set_data_proto(const char* value, size_t size);
  inline ::std::string* mutable_data_proto();
  inline ::std::string* release_data_proto();
  inline void set_allocated_data_proto(::std::string* data_proto);

  // optional int32 eval_after = 7 [default = 500];
  inline bool has_eval_after() const;
  inline void clear_eval_after();
  static const int kEvalAfterFieldNumber = 7;
  inline ::google::protobuf::int32 eval_after() const;
  inline void set_eval_after(::google::protobuf::int32 value);

  // optional int32 checkpoint_after = 8 [default = 1000];
  inline bool has_checkpoint_after() const;
  inline void clear_checkpoint_after();
  static const int kCheckpointAfterFieldNumber = 8;
  inline ::google::protobuf::int32 checkpoint_after() const;
  inline void set_checkpoint_after(::google::protobuf::int32 value);

  // optional string checkpoint_directory = 9;
  inline bool has_checkpoint_directory() const;
  inline void clear_checkpoint_directory();
  static const int kCheckpointDirectoryFieldNumber = 9;
  inline const ::std::string& checkpoint_directory() const;
  inline void set_checkpoint_directory(const ::std::string& value);
  inline void set_checkpoint_directory(const char* value);
  inline void set_checkpoint_directory(const char* value, size_t size);
  inline ::std::string* mutable_checkpoint_directory();
  inline ::std::string* release_checkpoint_directory();
  inline void set_allocated_checkpoint_directory(::std::string* checkpoint_directory);

  // optional bool randomize = 10 [default = false];
  inline bool has_randomize() const;
  inline void clear_randomize();
  static const int kRandomizeFieldNumber = 10;
  inline bool randomize() const;
  inline void set_randomize(bool value);

  // optional int32 random_seed = 11 [default = 42];
  inline bool has_random_seed() const;
  inline void clear_random_seed();
  static const int kRandomSeedFieldNumber = 11;
  inline ::google::protobuf::int32 random_seed() const;
  inline void set_random_seed(::google::protobuf::int32 value);

  // optional bool verbose = 12 [default = true];
  inline bool has_verbose() const;
  inline void clear_verbose();
  static const int kVerboseFieldNumber = 12;
  inline bool verbose() const;
  inline void set_verbose(bool value);

  // @@protoc_insertion_point(class_scope:model.Operation)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_optimizer();
  inline void clear_has_optimizer();
  inline void set_has_stop_condition();
  inline void clear_has_stop_condition();
  inline void set_has_operation_type();
  inline void clear_has_operation_type();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_data_proto();
  inline void clear_has_data_proto();
  inline void set_has_eval_after();
  inline void clear_has_eval_after();
  inline void set_has_checkpoint_after();
  inline void clear_has_checkpoint_after();
  inline void set_has_checkpoint_directory();
  inline void clear_has_checkpoint_directory();
  inline void set_has_randomize();
  inline void clear_has_randomize();
  inline void set_has_random_seed();
  inline void clear_has_random_seed();
  inline void set_has_verbose();
  inline void clear_has_verbose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  static ::std::string* _default_name_;
  ::model::Operation_StopCondition* stop_condition_;
  int optimizer_;
  int operation_type_;
  ::std::string* data_proto_;
  ::google::protobuf::int32 batch_size_;
  ::google::protobuf::int32 eval_after_;
  ::std::string* checkpoint_directory_;
  ::google::protobuf::int32 checkpoint_after_;
  ::google::protobuf::int32 random_seed_;
  bool randomize_;
  bool verbose_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static Operation* default_instance_;
};
// -------------------------------------------------------------------

class DatasetInfo_Data : public ::google::protobuf::Message {
 public:
  DatasetInfo_Data();
  virtual ~DatasetInfo_Data();

  DatasetInfo_Data(const DatasetInfo_Data& from);

  inline DatasetInfo_Data& operator=(const DatasetInfo_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetInfo_Data& default_instance();

  void Swap(DatasetInfo_Data* other);

  // implements Message ----------------------------------------------

  DatasetInfo_Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatasetInfo_Data& from);
  void MergeFrom(const DatasetInfo_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DatasetInfo_Data_DataType DataType;
  static const DataType TRAIN_SET = DatasetInfo_Data_DataType_TRAIN_SET;
  static const DataType EVAL_SET = DatasetInfo_Data_DataType_EVAL_SET;
  static const DataType TEST_SET = DatasetInfo_Data_DataType_TEST_SET;
  static inline bool DataType_IsValid(int value) {
    return DatasetInfo_Data_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    DatasetInfo_Data_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    DatasetInfo_Data_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    DatasetInfo_Data_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return DatasetInfo_Data_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return DatasetInfo_Data_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return DatasetInfo_Data_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .model.DatasetInfo.Data.DataType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::model::DatasetInfo_Data_DataType type() const;
  inline void set_type(::model::DatasetInfo_Data_DataType value);

  // required string file_pattern = 2;
  inline bool has_file_pattern() const;
  inline void clear_file_pattern();
  static const int kFilePatternFieldNumber = 2;
  inline const ::std::string& file_pattern() const;
  inline void set_file_pattern(const ::std::string& value);
  inline void set_file_pattern(const char* value);
  inline void set_file_pattern(const char* value, size_t size);
  inline ::std::string* mutable_file_pattern();
  inline ::std::string* release_file_pattern();
  inline void set_allocated_file_pattern(::std::string* file_pattern);

  // required int32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required int32 dimensions = 4;
  inline bool has_dimensions() const;
  inline void clear_dimensions();
  static const int kDimensionsFieldNumber = 4;
  inline ::google::protobuf::int32 dimensions() const;
  inline void set_dimensions(::google::protobuf::int32 value);

  // optional int32 type_size = 5 [default = 4];
  inline bool has_type_size() const;
  inline void clear_type_size();
  static const int kTypeSizeFieldNumber = 5;
  inline ::google::protobuf::int32 type_size() const;
  inline void set_type_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:model.DatasetInfo.Data)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_file_pattern();
  inline void clear_has_file_pattern();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_dimensions();
  inline void clear_has_dimensions();
  inline void set_has_type_size();
  inline void clear_has_type_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* file_pattern_;
  int type_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 dimensions_;
  ::google::protobuf::int32 type_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static DatasetInfo_Data* default_instance_;
};
// -------------------------------------------------------------------

class DatasetInfo : public ::google::protobuf::Message {
 public:
  DatasetInfo();
  virtual ~DatasetInfo();

  DatasetInfo(const DatasetInfo& from);

  inline DatasetInfo& operator=(const DatasetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetInfo& default_instance();

  void Swap(DatasetInfo* other);

  // implements Message ----------------------------------------------

  DatasetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatasetInfo& from);
  void MergeFrom(const DatasetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DatasetInfo_Data Data;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .model.DatasetInfo.Data data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::model::DatasetInfo_Data& data(int index) const;
  inline ::model::DatasetInfo_Data* mutable_data(int index);
  inline ::model::DatasetInfo_Data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::model::DatasetInfo_Data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::model::DatasetInfo_Data >*
      mutable_data();

  // optional string data_handler = 3 [default = "deeplearn"];
  inline bool has_data_handler() const;
  inline void clear_data_handler();
  static const int kDataHandlerFieldNumber = 3;
  inline const ::std::string& data_handler() const;
  inline void set_data_handler(const ::std::string& value);
  inline void set_data_handler(const char* value);
  inline void set_data_handler(const char* value, size_t size);
  inline ::std::string* mutable_data_handler();
  inline ::std::string* release_data_handler();
  inline void set_allocated_data_handler(::std::string* data_handler);

  // optional float main_memory = 4 [default = 2];
  inline bool has_main_memory() const;
  inline void clear_main_memory();
  static const int kMainMemoryFieldNumber = 4;
  inline float main_memory() const;
  inline void set_main_memory(float value);

  // optional float gpu_memory = 5 [default = 1.5];
  inline bool has_gpu_memory() const;
  inline void clear_gpu_memory();
  static const int kGpuMemoryFieldNumber = 5;
  inline float gpu_memory() const;
  inline void set_gpu_memory(float value);

  // optional string path_prefix = 6 [default = ""];
  inline bool has_path_prefix() const;
  inline void clear_path_prefix();
  static const int kPathPrefixFieldNumber = 6;
  inline const ::std::string& path_prefix() const;
  inline void set_path_prefix(const ::std::string& value);
  inline void set_path_prefix(const char* value);
  inline void set_path_prefix(const char* value, size_t size);
  inline ::std::string* mutable_path_prefix();
  inline ::std::string* release_path_prefix();
  inline void set_allocated_path_prefix(::std::string* path_prefix);

  // @@protoc_insertion_point(class_scope:model.DatasetInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_data_handler();
  inline void clear_has_data_handler();
  inline void set_has_main_memory();
  inline void clear_has_main_memory();
  inline void set_has_gpu_memory();
  inline void clear_has_gpu_memory();
  inline void set_has_path_prefix();
  inline void clear_has_path_prefix();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::model::DatasetInfo_Data > data_;
  ::std::string* data_handler_;
  static ::std::string* _default_data_handler_;
  float main_memory_;
  float gpu_memory_;
  ::std::string* path_prefix_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static DatasetInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// Hyperparams

// optional float base_learningrate = 1 [default = 0.01];
inline bool Hyperparams::has_base_learningrate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hyperparams::set_has_base_learningrate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hyperparams::clear_has_base_learningrate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hyperparams::clear_base_learningrate() {
  base_learningrate_ = 0.01f;
  clear_has_base_learningrate();
}
inline float Hyperparams::base_learningrate() const {
  return base_learningrate_;
}
inline void Hyperparams::set_base_learningrate(float value) {
  set_has_base_learningrate();
  base_learningrate_ = value;
}

// optional .model.Hyperparams.Decay learningrate_decay = 2 [default = NONE];
inline bool Hyperparams::has_learningrate_decay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hyperparams::set_has_learningrate_decay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hyperparams::clear_has_learningrate_decay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hyperparams::clear_learningrate_decay() {
  learningrate_decay_ = 0;
  clear_has_learningrate_decay();
}
inline ::model::Hyperparams_Decay Hyperparams::learningrate_decay() const {
  return static_cast< ::model::Hyperparams_Decay >(learningrate_decay_);
}
inline void Hyperparams::set_learningrate_decay(::model::Hyperparams_Decay value) {
  assert(::model::Hyperparams_Decay_IsValid(value));
  set_has_learningrate_decay();
  learningrate_decay_ = value;
}

// optional int32 learningrate_decay_half_life = 3 [default = 1000];
inline bool Hyperparams::has_learningrate_decay_half_life() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Hyperparams::set_has_learningrate_decay_half_life() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Hyperparams::clear_has_learningrate_decay_half_life() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Hyperparams::clear_learningrate_decay_half_life() {
  learningrate_decay_half_life_ = 1000;
  clear_has_learningrate_decay_half_life();
}
inline ::google::protobuf::int32 Hyperparams::learningrate_decay_half_life() const {
  return learningrate_decay_half_life_;
}
inline void Hyperparams::set_learningrate_decay_half_life(::google::protobuf::int32 value) {
  set_has_learningrate_decay_half_life();
  learningrate_decay_half_life_ = value;
}

// optional float initial_momentum = 4 [default = 0];
inline bool Hyperparams::has_initial_momentum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Hyperparams::set_has_initial_momentum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Hyperparams::clear_has_initial_momentum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Hyperparams::clear_initial_momentum() {
  initial_momentum_ = 0;
  clear_has_initial_momentum();
}
inline float Hyperparams::initial_momentum() const {
  return initial_momentum_;
}
inline void Hyperparams::set_initial_momentum(float value) {
  set_has_initial_momentum();
  initial_momentum_ = value;
}

// optional float final_momentum = 5 [default = 0];
inline bool Hyperparams::has_final_momentum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Hyperparams::set_has_final_momentum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Hyperparams::clear_has_final_momentum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Hyperparams::clear_final_momentum() {
  final_momentum_ = 0;
  clear_has_final_momentum();
}
inline float Hyperparams::final_momentum() const {
  return final_momentum_;
}
inline void Hyperparams::set_final_momentum(float value) {
  set_has_final_momentum();
  final_momentum_ = value;
}

// optional int32 momentum_change_steps = 6 [default = 10];
inline bool Hyperparams::has_momentum_change_steps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Hyperparams::set_has_momentum_change_steps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Hyperparams::clear_has_momentum_change_steps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Hyperparams::clear_momentum_change_steps() {
  momentum_change_steps_ = 10;
  clear_has_momentum_change_steps();
}
inline ::google::protobuf::int32 Hyperparams::momentum_change_steps() const {
  return momentum_change_steps_;
}
inline void Hyperparams::set_momentum_change_steps(::google::protobuf::int32 value) {
  set_has_momentum_change_steps();
  momentum_change_steps_ = value;
}

// -------------------------------------------------------------------

// NodeData

// required string name = 1;
inline bool NodeData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NodeData::name() const {
  return *name_;
}
inline void NodeData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NodeData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NodeData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NodeData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .model.NodeData.NodeType type = 2;
inline bool NodeData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::model::NodeData_NodeType NodeData::type() const {
  return static_cast< ::model::NodeData_NodeType >(type_);
}
inline void NodeData::set_type(::model::NodeData_NodeType value) {
  assert(::model::NodeData_NodeType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 dimension = 3;
inline bool NodeData::has_dimension() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeData::set_has_dimension() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeData::clear_has_dimension() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeData::clear_dimension() {
  dimension_ = 0;
  clear_has_dimension();
}
inline ::google::protobuf::int32 NodeData::dimension() const {
  return dimension_;
}
inline void NodeData::set_dimension(::google::protobuf::int32 value) {
  set_has_dimension();
  dimension_ = value;
}

// optional int32 input_start_index = 4;
inline bool NodeData::has_input_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeData::set_has_input_start_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeData::clear_has_input_start_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeData::clear_input_start_index() {
  input_start_index_ = 0;
  clear_has_input_start_index();
}
inline ::google::protobuf::int32 NodeData::input_start_index() const {
  return input_start_index_;
}
inline void NodeData::set_input_start_index(::google::protobuf::int32 value) {
  set_has_input_start_index();
  input_start_index_ = value;
}

// optional bytes bias = 5;
inline bool NodeData::has_bias() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NodeData::set_has_bias() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NodeData::clear_has_bias() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NodeData::clear_bias() {
  if (bias_ != &::google::protobuf::internal::kEmptyString) {
    bias_->clear();
  }
  clear_has_bias();
}
inline const ::std::string& NodeData::bias() const {
  return *bias_;
}
inline void NodeData::set_bias(const ::std::string& value) {
  set_has_bias();
  if (bias_ == &::google::protobuf::internal::kEmptyString) {
    bias_ = new ::std::string;
  }
  bias_->assign(value);
}
inline void NodeData::set_bias(const char* value) {
  set_has_bias();
  if (bias_ == &::google::protobuf::internal::kEmptyString) {
    bias_ = new ::std::string;
  }
  bias_->assign(value);
}
inline void NodeData::set_bias(const void* value, size_t size) {
  set_has_bias();
  if (bias_ == &::google::protobuf::internal::kEmptyString) {
    bias_ = new ::std::string;
  }
  bias_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeData::mutable_bias() {
  set_has_bias();
  if (bias_ == &::google::protobuf::internal::kEmptyString) {
    bias_ = new ::std::string;
  }
  return bias_;
}
inline ::std::string* NodeData::release_bias() {
  clear_has_bias();
  if (bias_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bias_;
    bias_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeData::set_allocated_bias(::std::string* bias) {
  if (bias_ != &::google::protobuf::internal::kEmptyString) {
    delete bias_;
  }
  if (bias) {
    set_has_bias();
    bias_ = bias;
  } else {
    clear_has_bias();
    bias_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .model.Hyperparams hyper_params = 6;
inline bool NodeData::has_hyper_params() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NodeData::set_has_hyper_params() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NodeData::clear_has_hyper_params() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NodeData::clear_hyper_params() {
  if (hyper_params_ != NULL) hyper_params_->::model::Hyperparams::Clear();
  clear_has_hyper_params();
}
inline const ::model::Hyperparams& NodeData::hyper_params() const {
  return hyper_params_ != NULL ? *hyper_params_ : *default_instance_->hyper_params_;
}
inline ::model::Hyperparams* NodeData::mutable_hyper_params() {
  set_has_hyper_params();
  if (hyper_params_ == NULL) hyper_params_ = new ::model::Hyperparams;
  return hyper_params_;
}
inline ::model::Hyperparams* NodeData::release_hyper_params() {
  clear_has_hyper_params();
  ::model::Hyperparams* temp = hyper_params_;
  hyper_params_ = NULL;
  return temp;
}
inline void NodeData::set_allocated_hyper_params(::model::Hyperparams* hyper_params) {
  delete hyper_params_;
  hyper_params_ = hyper_params;
  if (hyper_params) {
    set_has_hyper_params();
  } else {
    clear_has_hyper_params();
  }
}

// -------------------------------------------------------------------

// EdgeData

// optional bool directed = 1 [default = true];
inline bool EdgeData::has_directed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EdgeData::set_has_directed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EdgeData::clear_has_directed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EdgeData::clear_directed() {
  directed_ = true;
  clear_has_directed();
}
inline bool EdgeData::directed() const {
  return directed_;
}
inline void EdgeData::set_directed(bool value) {
  set_has_directed();
  directed_ = value;
}

// optional bytes weight = 2;
inline bool EdgeData::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EdgeData::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EdgeData::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EdgeData::clear_weight() {
  if (weight_ != &::google::protobuf::internal::kEmptyString) {
    weight_->clear();
  }
  clear_has_weight();
}
inline const ::std::string& EdgeData::weight() const {
  return *weight_;
}
inline void EdgeData::set_weight(const ::std::string& value) {
  set_has_weight();
  if (weight_ == &::google::protobuf::internal::kEmptyString) {
    weight_ = new ::std::string;
  }
  weight_->assign(value);
}
inline void EdgeData::set_weight(const char* value) {
  set_has_weight();
  if (weight_ == &::google::protobuf::internal::kEmptyString) {
    weight_ = new ::std::string;
  }
  weight_->assign(value);
}
inline void EdgeData::set_weight(const void* value, size_t size) {
  set_has_weight();
  if (weight_ == &::google::protobuf::internal::kEmptyString) {
    weight_ = new ::std::string;
  }
  weight_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EdgeData::mutable_weight() {
  set_has_weight();
  if (weight_ == &::google::protobuf::internal::kEmptyString) {
    weight_ = new ::std::string;
  }
  return weight_;
}
inline ::std::string* EdgeData::release_weight() {
  clear_has_weight();
  if (weight_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weight_;
    weight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EdgeData::set_allocated_weight(::std::string* weight) {
  if (weight_ != &::google::protobuf::internal::kEmptyString) {
    delete weight_;
  }
  if (weight) {
    set_has_weight();
    weight_ = weight;
  } else {
    clear_has_weight();
    weight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string node1 = 3;
inline bool EdgeData::has_node1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EdgeData::set_has_node1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EdgeData::clear_has_node1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EdgeData::clear_node1() {
  if (node1_ != &::google::protobuf::internal::kEmptyString) {
    node1_->clear();
  }
  clear_has_node1();
}
inline const ::std::string& EdgeData::node1() const {
  return *node1_;
}
inline void EdgeData::set_node1(const ::std::string& value) {
  set_has_node1();
  if (node1_ == &::google::protobuf::internal::kEmptyString) {
    node1_ = new ::std::string;
  }
  node1_->assign(value);
}
inline void EdgeData::set_node1(const char* value) {
  set_has_node1();
  if (node1_ == &::google::protobuf::internal::kEmptyString) {
    node1_ = new ::std::string;
  }
  node1_->assign(value);
}
inline void EdgeData::set_node1(const char* value, size_t size) {
  set_has_node1();
  if (node1_ == &::google::protobuf::internal::kEmptyString) {
    node1_ = new ::std::string;
  }
  node1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EdgeData::mutable_node1() {
  set_has_node1();
  if (node1_ == &::google::protobuf::internal::kEmptyString) {
    node1_ = new ::std::string;
  }
  return node1_;
}
inline ::std::string* EdgeData::release_node1() {
  clear_has_node1();
  if (node1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = node1_;
    node1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EdgeData::set_allocated_node1(::std::string* node1) {
  if (node1_ != &::google::protobuf::internal::kEmptyString) {
    delete node1_;
  }
  if (node1) {
    set_has_node1();
    node1_ = node1;
  } else {
    clear_has_node1();
    node1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string node2 = 4;
inline bool EdgeData::has_node2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EdgeData::set_has_node2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EdgeData::clear_has_node2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EdgeData::clear_node2() {
  if (node2_ != &::google::protobuf::internal::kEmptyString) {
    node2_->clear();
  }
  clear_has_node2();
}
inline const ::std::string& EdgeData::node2() const {
  return *node2_;
}
inline void EdgeData::set_node2(const ::std::string& value) {
  set_has_node2();
  if (node2_ == &::google::protobuf::internal::kEmptyString) {
    node2_ = new ::std::string;
  }
  node2_->assign(value);
}
inline void EdgeData::set_node2(const char* value) {
  set_has_node2();
  if (node2_ == &::google::protobuf::internal::kEmptyString) {
    node2_ = new ::std::string;
  }
  node2_->assign(value);
}
inline void EdgeData::set_node2(const char* value, size_t size) {
  set_has_node2();
  if (node2_ == &::google::protobuf::internal::kEmptyString) {
    node2_ = new ::std::string;
  }
  node2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EdgeData::mutable_node2() {
  set_has_node2();
  if (node2_ == &::google::protobuf::internal::kEmptyString) {
    node2_ = new ::std::string;
  }
  return node2_;
}
inline ::std::string* EdgeData::release_node2() {
  clear_has_node2();
  if (node2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = node2_;
    node2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EdgeData::set_allocated_node2(::std::string* node2) {
  if (node2_ != &::google::protobuf::internal::kEmptyString) {
    delete node2_;
  }
  if (node2) {
    set_has_node2();
    node2_ = node2;
  } else {
    clear_has_node2();
    node2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .model.Hyperparams hyper_params = 5;
inline bool EdgeData::has_hyper_params() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EdgeData::set_has_hyper_params() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EdgeData::clear_has_hyper_params() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EdgeData::clear_hyper_params() {
  if (hyper_params_ != NULL) hyper_params_->::model::Hyperparams::Clear();
  clear_has_hyper_params();
}
inline const ::model::Hyperparams& EdgeData::hyper_params() const {
  return hyper_params_ != NULL ? *hyper_params_ : *default_instance_->hyper_params_;
}
inline ::model::Hyperparams* EdgeData::mutable_hyper_params() {
  set_has_hyper_params();
  if (hyper_params_ == NULL) hyper_params_ = new ::model::Hyperparams;
  return hyper_params_;
}
inline ::model::Hyperparams* EdgeData::release_hyper_params() {
  clear_has_hyper_params();
  ::model::Hyperparams* temp = hyper_params_;
  hyper_params_ = NULL;
  return temp;
}
inline void EdgeData::set_allocated_hyper_params(::model::Hyperparams* hyper_params) {
  delete hyper_params_;
  hyper_params_ = hyper_params;
  if (hyper_params) {
    set_has_hyper_params();
  } else {
    clear_has_hyper_params();
  }
}

// -------------------------------------------------------------------

// SpnData

// optional string node_list = 1;
inline bool SpnData::has_node_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpnData::set_has_node_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpnData::clear_has_node_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpnData::clear_node_list() {
  if (node_list_ != &::google::protobuf::internal::kEmptyString) {
    node_list_->clear();
  }
  clear_has_node_list();
}
inline const ::std::string& SpnData::node_list() const {
  return *node_list_;
}
inline void SpnData::set_node_list(const ::std::string& value) {
  set_has_node_list();
  if (node_list_ == &::google::protobuf::internal::kEmptyString) {
    node_list_ = new ::std::string;
  }
  node_list_->assign(value);
}
inline void SpnData::set_node_list(const char* value) {
  set_has_node_list();
  if (node_list_ == &::google::protobuf::internal::kEmptyString) {
    node_list_ = new ::std::string;
  }
  node_list_->assign(value);
}
inline void SpnData::set_node_list(const char* value, size_t size) {
  set_has_node_list();
  if (node_list_ == &::google::protobuf::internal::kEmptyString) {
    node_list_ = new ::std::string;
  }
  node_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpnData::mutable_node_list() {
  set_has_node_list();
  if (node_list_ == &::google::protobuf::internal::kEmptyString) {
    node_list_ = new ::std::string;
  }
  return node_list_;
}
inline ::std::string* SpnData::release_node_list() {
  clear_has_node_list();
  if (node_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = node_list_;
    node_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpnData::set_allocated_node_list(::std::string* node_list) {
  if (node_list_ != &::google::protobuf::internal::kEmptyString) {
    delete node_list_;
  }
  if (node_list) {
    set_has_node_list();
    node_list_ = node_list;
  } else {
    clear_has_node_list();
    node_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adjacency_matrix = 2;
inline bool SpnData::has_adjacency_matrix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpnData::set_has_adjacency_matrix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpnData::clear_has_adjacency_matrix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpnData::clear_adjacency_matrix() {
  if (adjacency_matrix_ != &::google::protobuf::internal::kEmptyString) {
    adjacency_matrix_->clear();
  }
  clear_has_adjacency_matrix();
}
inline const ::std::string& SpnData::adjacency_matrix() const {
  return *adjacency_matrix_;
}
inline void SpnData::set_adjacency_matrix(const ::std::string& value) {
  set_has_adjacency_matrix();
  if (adjacency_matrix_ == &::google::protobuf::internal::kEmptyString) {
    adjacency_matrix_ = new ::std::string;
  }
  adjacency_matrix_->assign(value);
}
inline void SpnData::set_adjacency_matrix(const char* value) {
  set_has_adjacency_matrix();
  if (adjacency_matrix_ == &::google::protobuf::internal::kEmptyString) {
    adjacency_matrix_ = new ::std::string;
  }
  adjacency_matrix_->assign(value);
}
inline void SpnData::set_adjacency_matrix(const char* value, size_t size) {
  set_has_adjacency_matrix();
  if (adjacency_matrix_ == &::google::protobuf::internal::kEmptyString) {
    adjacency_matrix_ = new ::std::string;
  }
  adjacency_matrix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpnData::mutable_adjacency_matrix() {
  set_has_adjacency_matrix();
  if (adjacency_matrix_ == &::google::protobuf::internal::kEmptyString) {
    adjacency_matrix_ = new ::std::string;
  }
  return adjacency_matrix_;
}
inline ::std::string* SpnData::release_adjacency_matrix() {
  clear_has_adjacency_matrix();
  if (adjacency_matrix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adjacency_matrix_;
    adjacency_matrix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpnData::set_allocated_adjacency_matrix(::std::string* adjacency_matrix) {
  if (adjacency_matrix_ != &::google::protobuf::internal::kEmptyString) {
    delete adjacency_matrix_;
  }
  if (adjacency_matrix) {
    set_has_adjacency_matrix();
    adjacency_matrix_ = adjacency_matrix;
  } else {
    clear_has_adjacency_matrix();
    adjacency_matrix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string input_indices = 3;
inline bool SpnData::has_input_indices() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpnData::set_has_input_indices() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpnData::clear_has_input_indices() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpnData::clear_input_indices() {
  if (input_indices_ != &::google::protobuf::internal::kEmptyString) {
    input_indices_->clear();
  }
  clear_has_input_indices();
}
inline const ::std::string& SpnData::input_indices() const {
  return *input_indices_;
}
inline void SpnData::set_input_indices(const ::std::string& value) {
  set_has_input_indices();
  if (input_indices_ == &::google::protobuf::internal::kEmptyString) {
    input_indices_ = new ::std::string;
  }
  input_indices_->assign(value);
}
inline void SpnData::set_input_indices(const char* value) {
  set_has_input_indices();
  if (input_indices_ == &::google::protobuf::internal::kEmptyString) {
    input_indices_ = new ::std::string;
  }
  input_indices_->assign(value);
}
inline void SpnData::set_input_indices(const char* value, size_t size) {
  set_has_input_indices();
  if (input_indices_ == &::google::protobuf::internal::kEmptyString) {
    input_indices_ = new ::std::string;
  }
  input_indices_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpnData::mutable_input_indices() {
  set_has_input_indices();
  if (input_indices_ == &::google::protobuf::internal::kEmptyString) {
    input_indices_ = new ::std::string;
  }
  return input_indices_;
}
inline ::std::string* SpnData::release_input_indices() {
  clear_has_input_indices();
  if (input_indices_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_indices_;
    input_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpnData::set_allocated_input_indices(::std::string* input_indices) {
  if (input_indices_ != &::google::protobuf::internal::kEmptyString) {
    delete input_indices_;
  }
  if (input_indices) {
    set_has_input_indices();
    input_indices_ = input_indices;
  } else {
    clear_has_input_indices();
    input_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ModelData

// required string name = 1;
inline bool ModelData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ModelData::name() const {
  return *name_;
}
inline void ModelData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModelData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModelData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ModelData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModelData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .model.ModelData.ModelType model_type = 2;
inline bool ModelData::has_model_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelData::set_has_model_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelData::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelData::clear_model_type() {
  model_type_ = 0;
  clear_has_model_type();
}
inline ::model::ModelData_ModelType ModelData::model_type() const {
  return static_cast< ::model::ModelData_ModelType >(model_type_);
}
inline void ModelData::set_model_type(::model::ModelData_ModelType value) {
  assert(::model::ModelData_ModelType_IsValid(value));
  set_has_model_type();
  model_type_ = value;
}

// optional .model.SpnData spn_data = 3;
inline bool ModelData::has_spn_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelData::set_has_spn_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelData::clear_has_spn_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelData::clear_spn_data() {
  if (spn_data_ != NULL) spn_data_->::model::SpnData::Clear();
  clear_has_spn_data();
}
inline const ::model::SpnData& ModelData::spn_data() const {
  return spn_data_ != NULL ? *spn_data_ : *default_instance_->spn_data_;
}
inline ::model::SpnData* ModelData::mutable_spn_data() {
  set_has_spn_data();
  if (spn_data_ == NULL) spn_data_ = new ::model::SpnData;
  return spn_data_;
}
inline ::model::SpnData* ModelData::release_spn_data() {
  clear_has_spn_data();
  ::model::SpnData* temp = spn_data_;
  spn_data_ = NULL;
  return temp;
}
inline void ModelData::set_allocated_spn_data(::model::SpnData* spn_data) {
  delete spn_data_;
  spn_data_ = spn_data;
  if (spn_data) {
    set_has_spn_data();
  } else {
    clear_has_spn_data();
  }
}

// optional .model.Hyperparams hyper_params = 4;
inline bool ModelData::has_hyper_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModelData::set_has_hyper_params() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModelData::clear_has_hyper_params() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModelData::clear_hyper_params() {
  if (hyper_params_ != NULL) hyper_params_->::model::Hyperparams::Clear();
  clear_has_hyper_params();
}
inline const ::model::Hyperparams& ModelData::hyper_params() const {
  return hyper_params_ != NULL ? *hyper_params_ : *default_instance_->hyper_params_;
}
inline ::model::Hyperparams* ModelData::mutable_hyper_params() {
  set_has_hyper_params();
  if (hyper_params_ == NULL) hyper_params_ = new ::model::Hyperparams;
  return hyper_params_;
}
inline ::model::Hyperparams* ModelData::release_hyper_params() {
  clear_has_hyper_params();
  ::model::Hyperparams* temp = hyper_params_;
  hyper_params_ = NULL;
  return temp;
}
inline void ModelData::set_allocated_hyper_params(::model::Hyperparams* hyper_params) {
  delete hyper_params_;
  hyper_params_ = hyper_params;
  if (hyper_params) {
    set_has_hyper_params();
  } else {
    clear_has_hyper_params();
  }
}

// repeated .model.NodeData nodes = 5;
inline int ModelData::nodes_size() const {
  return nodes_.size();
}
inline void ModelData::clear_nodes() {
  nodes_.Clear();
}
inline const ::model::NodeData& ModelData::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::model::NodeData* ModelData::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::model::NodeData* ModelData::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::model::NodeData >&
ModelData::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::model::NodeData >*
ModelData::mutable_nodes() {
  return &nodes_;
}

// repeated .model.EdgeData edges = 6;
inline int ModelData::edges_size() const {
  return edges_.size();
}
inline void ModelData::clear_edges() {
  edges_.Clear();
}
inline const ::model::EdgeData& ModelData::edges(int index) const {
  return edges_.Get(index);
}
inline ::model::EdgeData* ModelData::mutable_edges(int index) {
  return edges_.Mutable(index);
}
inline ::model::EdgeData* ModelData::add_edges() {
  return edges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::model::EdgeData >&
ModelData::edges() const {
  return edges_;
}
inline ::google::protobuf::RepeatedPtrField< ::model::EdgeData >*
ModelData::mutable_edges() {
  return &edges_;
}

// -------------------------------------------------------------------

// Operation_StopCondition

// optional bool all_processed = 1 [default = true];
inline bool Operation_StopCondition::has_all_processed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operation_StopCondition::set_has_all_processed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operation_StopCondition::clear_has_all_processed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operation_StopCondition::clear_all_processed() {
  all_processed_ = true;
  clear_has_all_processed();
}
inline bool Operation_StopCondition::all_processed() const {
  return all_processed_;
}
inline void Operation_StopCondition::set_all_processed(bool value) {
  set_has_all_processed();
  all_processed_ = value;
}

// optional int32 steps = 2 [default = 10000];
inline bool Operation_StopCondition::has_steps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Operation_StopCondition::set_has_steps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Operation_StopCondition::clear_has_steps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Operation_StopCondition::clear_steps() {
  steps_ = 10000;
  clear_has_steps();
}
inline ::google::protobuf::int32 Operation_StopCondition::steps() const {
  return steps_;
}
inline void Operation_StopCondition::set_steps(::google::protobuf::int32 value) {
  set_has_steps();
  steps_ = value;
}

// -------------------------------------------------------------------

// Operation

// required string name = 1 [default = "operation"];
inline bool Operation::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operation::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operation::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operation::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& Operation::name() const {
  return *name_;
}
inline void Operation::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Operation::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Operation::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Operation::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  return name_;
}
inline ::std::string* Operation::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void Operation::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
}

// required .model.Operation.Optimizer optimizer = 2 [default = GRADIENT_DESCENT];
inline bool Operation::has_optimizer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Operation::set_has_optimizer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Operation::clear_has_optimizer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Operation::clear_optimizer() {
  optimizer_ = 0;
  clear_has_optimizer();
}
inline ::model::Operation_Optimizer Operation::optimizer() const {
  return static_cast< ::model::Operation_Optimizer >(optimizer_);
}
inline void Operation::set_optimizer(::model::Operation_Optimizer value) {
  assert(::model::Operation_Optimizer_IsValid(value));
  set_has_optimizer();
  optimizer_ = value;
}

// optional .model.Operation.StopCondition stop_condition = 3;
inline bool Operation::has_stop_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Operation::set_has_stop_condition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Operation::clear_has_stop_condition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Operation::clear_stop_condition() {
  if (stop_condition_ != NULL) stop_condition_->::model::Operation_StopCondition::Clear();
  clear_has_stop_condition();
}
inline const ::model::Operation_StopCondition& Operation::stop_condition() const {
  return stop_condition_ != NULL ? *stop_condition_ : *default_instance_->stop_condition_;
}
inline ::model::Operation_StopCondition* Operation::mutable_stop_condition() {
  set_has_stop_condition();
  if (stop_condition_ == NULL) stop_condition_ = new ::model::Operation_StopCondition;
  return stop_condition_;
}
inline ::model::Operation_StopCondition* Operation::release_stop_condition() {
  clear_has_stop_condition();
  ::model::Operation_StopCondition* temp = stop_condition_;
  stop_condition_ = NULL;
  return temp;
}
inline void Operation::set_allocated_stop_condition(::model::Operation_StopCondition* stop_condition) {
  delete stop_condition_;
  stop_condition_ = stop_condition;
  if (stop_condition) {
    set_has_stop_condition();
  } else {
    clear_has_stop_condition();
  }
}

// optional .model.Operation.OperationType operation_type = 4 [default = TRAIN];
inline bool Operation::has_operation_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Operation::set_has_operation_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Operation::clear_has_operation_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Operation::clear_operation_type() {
  operation_type_ = 0;
  clear_has_operation_type();
}
inline ::model::Operation_OperationType Operation::operation_type() const {
  return static_cast< ::model::Operation_OperationType >(operation_type_);
}
inline void Operation::set_operation_type(::model::Operation_OperationType value) {
  assert(::model::Operation_OperationType_IsValid(value));
  set_has_operation_type();
  operation_type_ = value;
}

// optional int32 batch_size = 5 [default = 100];
inline bool Operation::has_batch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Operation::set_has_batch_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Operation::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Operation::clear_batch_size() {
  batch_size_ = 100;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 Operation::batch_size() const {
  return batch_size_;
}
inline void Operation::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional string data_proto = 6;
inline bool Operation::has_data_proto() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Operation::set_has_data_proto() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Operation::clear_has_data_proto() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Operation::clear_data_proto() {
  if (data_proto_ != &::google::protobuf::internal::kEmptyString) {
    data_proto_->clear();
  }
  clear_has_data_proto();
}
inline const ::std::string& Operation::data_proto() const {
  return *data_proto_;
}
inline void Operation::set_data_proto(const ::std::string& value) {
  set_has_data_proto();
  if (data_proto_ == &::google::protobuf::internal::kEmptyString) {
    data_proto_ = new ::std::string;
  }
  data_proto_->assign(value);
}
inline void Operation::set_data_proto(const char* value) {
  set_has_data_proto();
  if (data_proto_ == &::google::protobuf::internal::kEmptyString) {
    data_proto_ = new ::std::string;
  }
  data_proto_->assign(value);
}
inline void Operation::set_data_proto(const char* value, size_t size) {
  set_has_data_proto();
  if (data_proto_ == &::google::protobuf::internal::kEmptyString) {
    data_proto_ = new ::std::string;
  }
  data_proto_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Operation::mutable_data_proto() {
  set_has_data_proto();
  if (data_proto_ == &::google::protobuf::internal::kEmptyString) {
    data_proto_ = new ::std::string;
  }
  return data_proto_;
}
inline ::std::string* Operation::release_data_proto() {
  clear_has_data_proto();
  if (data_proto_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_proto_;
    data_proto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Operation::set_allocated_data_proto(::std::string* data_proto) {
  if (data_proto_ != &::google::protobuf::internal::kEmptyString) {
    delete data_proto_;
  }
  if (data_proto) {
    set_has_data_proto();
    data_proto_ = data_proto;
  } else {
    clear_has_data_proto();
    data_proto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 eval_after = 7 [default = 500];
inline bool Operation::has_eval_after() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Operation::set_has_eval_after() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Operation::clear_has_eval_after() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Operation::clear_eval_after() {
  eval_after_ = 500;
  clear_has_eval_after();
}
inline ::google::protobuf::int32 Operation::eval_after() const {
  return eval_after_;
}
inline void Operation::set_eval_after(::google::protobuf::int32 value) {
  set_has_eval_after();
  eval_after_ = value;
}

// optional int32 checkpoint_after = 8 [default = 1000];
inline bool Operation::has_checkpoint_after() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Operation::set_has_checkpoint_after() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Operation::clear_has_checkpoint_after() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Operation::clear_checkpoint_after() {
  checkpoint_after_ = 1000;
  clear_has_checkpoint_after();
}
inline ::google::protobuf::int32 Operation::checkpoint_after() const {
  return checkpoint_after_;
}
inline void Operation::set_checkpoint_after(::google::protobuf::int32 value) {
  set_has_checkpoint_after();
  checkpoint_after_ = value;
}

// optional string checkpoint_directory = 9;
inline bool Operation::has_checkpoint_directory() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Operation::set_has_checkpoint_directory() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Operation::clear_has_checkpoint_directory() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Operation::clear_checkpoint_directory() {
  if (checkpoint_directory_ != &::google::protobuf::internal::kEmptyString) {
    checkpoint_directory_->clear();
  }
  clear_has_checkpoint_directory();
}
inline const ::std::string& Operation::checkpoint_directory() const {
  return *checkpoint_directory_;
}
inline void Operation::set_checkpoint_directory(const ::std::string& value) {
  set_has_checkpoint_directory();
  if (checkpoint_directory_ == &::google::protobuf::internal::kEmptyString) {
    checkpoint_directory_ = new ::std::string;
  }
  checkpoint_directory_->assign(value);
}
inline void Operation::set_checkpoint_directory(const char* value) {
  set_has_checkpoint_directory();
  if (checkpoint_directory_ == &::google::protobuf::internal::kEmptyString) {
    checkpoint_directory_ = new ::std::string;
  }
  checkpoint_directory_->assign(value);
}
inline void Operation::set_checkpoint_directory(const char* value, size_t size) {
  set_has_checkpoint_directory();
  if (checkpoint_directory_ == &::google::protobuf::internal::kEmptyString) {
    checkpoint_directory_ = new ::std::string;
  }
  checkpoint_directory_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Operation::mutable_checkpoint_directory() {
  set_has_checkpoint_directory();
  if (checkpoint_directory_ == &::google::protobuf::internal::kEmptyString) {
    checkpoint_directory_ = new ::std::string;
  }
  return checkpoint_directory_;
}
inline ::std::string* Operation::release_checkpoint_directory() {
  clear_has_checkpoint_directory();
  if (checkpoint_directory_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = checkpoint_directory_;
    checkpoint_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Operation::set_allocated_checkpoint_directory(::std::string* checkpoint_directory) {
  if (checkpoint_directory_ != &::google::protobuf::internal::kEmptyString) {
    delete checkpoint_directory_;
  }
  if (checkpoint_directory) {
    set_has_checkpoint_directory();
    checkpoint_directory_ = checkpoint_directory;
  } else {
    clear_has_checkpoint_directory();
    checkpoint_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool randomize = 10 [default = false];
inline bool Operation::has_randomize() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Operation::set_has_randomize() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Operation::clear_has_randomize() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Operation::clear_randomize() {
  randomize_ = false;
  clear_has_randomize();
}
inline bool Operation::randomize() const {
  return randomize_;
}
inline void Operation::set_randomize(bool value) {
  set_has_randomize();
  randomize_ = value;
}

// optional int32 random_seed = 11 [default = 42];
inline bool Operation::has_random_seed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Operation::set_has_random_seed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Operation::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Operation::clear_random_seed() {
  random_seed_ = 42;
  clear_has_random_seed();
}
inline ::google::protobuf::int32 Operation::random_seed() const {
  return random_seed_;
}
inline void Operation::set_random_seed(::google::protobuf::int32 value) {
  set_has_random_seed();
  random_seed_ = value;
}

// optional bool verbose = 12 [default = true];
inline bool Operation::has_verbose() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Operation::set_has_verbose() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Operation::clear_has_verbose() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Operation::clear_verbose() {
  verbose_ = true;
  clear_has_verbose();
}
inline bool Operation::verbose() const {
  return verbose_;
}
inline void Operation::set_verbose(bool value) {
  set_has_verbose();
  verbose_ = value;
}

// -------------------------------------------------------------------

// DatasetInfo_Data

// required .model.DatasetInfo.Data.DataType type = 1;
inline bool DatasetInfo_Data::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatasetInfo_Data::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatasetInfo_Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatasetInfo_Data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::model::DatasetInfo_Data_DataType DatasetInfo_Data::type() const {
  return static_cast< ::model::DatasetInfo_Data_DataType >(type_);
}
inline void DatasetInfo_Data::set_type(::model::DatasetInfo_Data_DataType value) {
  assert(::model::DatasetInfo_Data_DataType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string file_pattern = 2;
inline bool DatasetInfo_Data::has_file_pattern() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatasetInfo_Data::set_has_file_pattern() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatasetInfo_Data::clear_has_file_pattern() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatasetInfo_Data::clear_file_pattern() {
  if (file_pattern_ != &::google::protobuf::internal::kEmptyString) {
    file_pattern_->clear();
  }
  clear_has_file_pattern();
}
inline const ::std::string& DatasetInfo_Data::file_pattern() const {
  return *file_pattern_;
}
inline void DatasetInfo_Data::set_file_pattern(const ::std::string& value) {
  set_has_file_pattern();
  if (file_pattern_ == &::google::protobuf::internal::kEmptyString) {
    file_pattern_ = new ::std::string;
  }
  file_pattern_->assign(value);
}
inline void DatasetInfo_Data::set_file_pattern(const char* value) {
  set_has_file_pattern();
  if (file_pattern_ == &::google::protobuf::internal::kEmptyString) {
    file_pattern_ = new ::std::string;
  }
  file_pattern_->assign(value);
}
inline void DatasetInfo_Data::set_file_pattern(const char* value, size_t size) {
  set_has_file_pattern();
  if (file_pattern_ == &::google::protobuf::internal::kEmptyString) {
    file_pattern_ = new ::std::string;
  }
  file_pattern_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatasetInfo_Data::mutable_file_pattern() {
  set_has_file_pattern();
  if (file_pattern_ == &::google::protobuf::internal::kEmptyString) {
    file_pattern_ = new ::std::string;
  }
  return file_pattern_;
}
inline ::std::string* DatasetInfo_Data::release_file_pattern() {
  clear_has_file_pattern();
  if (file_pattern_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_pattern_;
    file_pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DatasetInfo_Data::set_allocated_file_pattern(::std::string* file_pattern) {
  if (file_pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete file_pattern_;
  }
  if (file_pattern) {
    set_has_file_pattern();
    file_pattern_ = file_pattern;
  } else {
    clear_has_file_pattern();
    file_pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 size = 3;
inline bool DatasetInfo_Data::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DatasetInfo_Data::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DatasetInfo_Data::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DatasetInfo_Data::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 DatasetInfo_Data::size() const {
  return size_;
}
inline void DatasetInfo_Data::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required int32 dimensions = 4;
inline bool DatasetInfo_Data::has_dimensions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DatasetInfo_Data::set_has_dimensions() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DatasetInfo_Data::clear_has_dimensions() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DatasetInfo_Data::clear_dimensions() {
  dimensions_ = 0;
  clear_has_dimensions();
}
inline ::google::protobuf::int32 DatasetInfo_Data::dimensions() const {
  return dimensions_;
}
inline void DatasetInfo_Data::set_dimensions(::google::protobuf::int32 value) {
  set_has_dimensions();
  dimensions_ = value;
}

// optional int32 type_size = 5 [default = 4];
inline bool DatasetInfo_Data::has_type_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DatasetInfo_Data::set_has_type_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DatasetInfo_Data::clear_has_type_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DatasetInfo_Data::clear_type_size() {
  type_size_ = 4;
  clear_has_type_size();
}
inline ::google::protobuf::int32 DatasetInfo_Data::type_size() const {
  return type_size_;
}
inline void DatasetInfo_Data::set_type_size(::google::protobuf::int32 value) {
  set_has_type_size();
  type_size_ = value;
}

// -------------------------------------------------------------------

// DatasetInfo

// required string name = 1;
inline bool DatasetInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatasetInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatasetInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatasetInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DatasetInfo::name() const {
  return *name_;
}
inline void DatasetInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DatasetInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DatasetInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatasetInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DatasetInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DatasetInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .model.DatasetInfo.Data data = 2;
inline int DatasetInfo::data_size() const {
  return data_.size();
}
inline void DatasetInfo::clear_data() {
  data_.Clear();
}
inline const ::model::DatasetInfo_Data& DatasetInfo::data(int index) const {
  return data_.Get(index);
}
inline ::model::DatasetInfo_Data* DatasetInfo::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::model::DatasetInfo_Data* DatasetInfo::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::model::DatasetInfo_Data >&
DatasetInfo::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::model::DatasetInfo_Data >*
DatasetInfo::mutable_data() {
  return &data_;
}

// optional string data_handler = 3 [default = "deeplearn"];
inline bool DatasetInfo::has_data_handler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DatasetInfo::set_has_data_handler() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DatasetInfo::clear_has_data_handler() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DatasetInfo::clear_data_handler() {
  if (data_handler_ != _default_data_handler_) {
    data_handler_->assign(*_default_data_handler_);
  }
  clear_has_data_handler();
}
inline const ::std::string& DatasetInfo::data_handler() const {
  return *data_handler_;
}
inline void DatasetInfo::set_data_handler(const ::std::string& value) {
  set_has_data_handler();
  if (data_handler_ == _default_data_handler_) {
    data_handler_ = new ::std::string;
  }
  data_handler_->assign(value);
}
inline void DatasetInfo::set_data_handler(const char* value) {
  set_has_data_handler();
  if (data_handler_ == _default_data_handler_) {
    data_handler_ = new ::std::string;
  }
  data_handler_->assign(value);
}
inline void DatasetInfo::set_data_handler(const char* value, size_t size) {
  set_has_data_handler();
  if (data_handler_ == _default_data_handler_) {
    data_handler_ = new ::std::string;
  }
  data_handler_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatasetInfo::mutable_data_handler() {
  set_has_data_handler();
  if (data_handler_ == _default_data_handler_) {
    data_handler_ = new ::std::string(*_default_data_handler_);
  }
  return data_handler_;
}
inline ::std::string* DatasetInfo::release_data_handler() {
  clear_has_data_handler();
  if (data_handler_ == _default_data_handler_) {
    return NULL;
  } else {
    ::std::string* temp = data_handler_;
    data_handler_ = const_cast< ::std::string*>(_default_data_handler_);
    return temp;
  }
}
inline void DatasetInfo::set_allocated_data_handler(::std::string* data_handler) {
  if (data_handler_ != _default_data_handler_) {
    delete data_handler_;
  }
  if (data_handler) {
    set_has_data_handler();
    data_handler_ = data_handler;
  } else {
    clear_has_data_handler();
    data_handler_ = const_cast< ::std::string*>(_default_data_handler_);
  }
}

// optional float main_memory = 4 [default = 2];
inline bool DatasetInfo::has_main_memory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DatasetInfo::set_has_main_memory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DatasetInfo::clear_has_main_memory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DatasetInfo::clear_main_memory() {
  main_memory_ = 2;
  clear_has_main_memory();
}
inline float DatasetInfo::main_memory() const {
  return main_memory_;
}
inline void DatasetInfo::set_main_memory(float value) {
  set_has_main_memory();
  main_memory_ = value;
}

// optional float gpu_memory = 5 [default = 1.5];
inline bool DatasetInfo::has_gpu_memory() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DatasetInfo::set_has_gpu_memory() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DatasetInfo::clear_has_gpu_memory() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DatasetInfo::clear_gpu_memory() {
  gpu_memory_ = 1.5f;
  clear_has_gpu_memory();
}
inline float DatasetInfo::gpu_memory() const {
  return gpu_memory_;
}
inline void DatasetInfo::set_gpu_memory(float value) {
  set_has_gpu_memory();
  gpu_memory_ = value;
}

// optional string path_prefix = 6 [default = ""];
inline bool DatasetInfo::has_path_prefix() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DatasetInfo::set_has_path_prefix() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DatasetInfo::clear_has_path_prefix() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DatasetInfo::clear_path_prefix() {
  if (path_prefix_ != &::google::protobuf::internal::kEmptyString) {
    path_prefix_->clear();
  }
  clear_has_path_prefix();
}
inline const ::std::string& DatasetInfo::path_prefix() const {
  return *path_prefix_;
}
inline void DatasetInfo::set_path_prefix(const ::std::string& value) {
  set_has_path_prefix();
  if (path_prefix_ == &::google::protobuf::internal::kEmptyString) {
    path_prefix_ = new ::std::string;
  }
  path_prefix_->assign(value);
}
inline void DatasetInfo::set_path_prefix(const char* value) {
  set_has_path_prefix();
  if (path_prefix_ == &::google::protobuf::internal::kEmptyString) {
    path_prefix_ = new ::std::string;
  }
  path_prefix_->assign(value);
}
inline void DatasetInfo::set_path_prefix(const char* value, size_t size) {
  set_has_path_prefix();
  if (path_prefix_ == &::google::protobuf::internal::kEmptyString) {
    path_prefix_ = new ::std::string;
  }
  path_prefix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatasetInfo::mutable_path_prefix() {
  set_has_path_prefix();
  if (path_prefix_ == &::google::protobuf::internal::kEmptyString) {
    path_prefix_ = new ::std::string;
  }
  return path_prefix_;
}
inline ::std::string* DatasetInfo::release_path_prefix() {
  clear_has_path_prefix();
  if (path_prefix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_prefix_;
    path_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DatasetInfo::set_allocated_path_prefix(::std::string* path_prefix) {
  if (path_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete path_prefix_;
  }
  if (path_prefix) {
    set_has_path_prefix();
    path_prefix_ = path_prefix;
  } else {
    clear_has_path_prefix();
    path_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace model

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::Hyperparams_Decay>() {
  return ::model::Hyperparams_Decay_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::NodeData_NodeType>() {
  return ::model::NodeData_NodeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::ModelData_ModelType>() {
  return ::model::ModelData_ModelType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::Operation_Optimizer>() {
  return ::model::Operation_Optimizer_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::Operation_OperationType>() {
  return ::model::Operation_OperationType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::DatasetInfo_Data_DataType>() {
  return ::model::DatasetInfo_Data_DataType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_deeplearn_2eproto__INCLUDED
