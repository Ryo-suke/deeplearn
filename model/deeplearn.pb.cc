// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deeplearn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "deeplearn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace model {

namespace {

const ::google::protobuf::Descriptor* Metric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metric_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Metric_MetricType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Metrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hyperparams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hyperparams_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Hyperparams_Decay_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Hyperparams_BestModelCriterion_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NodeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeData_NodeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EdgeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdgeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpnLayerInit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpnLayerInit_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpnData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpnData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModelData_ModelType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Operation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operation_StopCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_StopCondition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Operation_Optimizer_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Operation_OperationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DatasetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatasetInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DatasetInfo_DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DatasetInfo_DataFormat_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DatabaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatabaseInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_deeplearn_2eproto() {
  protobuf_AddDesc_deeplearn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "deeplearn.proto");
  GOOGLE_CHECK(file != NULL);
  Metric_descriptor_ = file->message_type(0);
  static const int Metric_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, values_),
  };
  Metric_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metric_descriptor_,
      Metric::default_instance_,
      Metric_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metric, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metric));
  Metric_MetricType_descriptor_ = Metric_descriptor_->enum_type(0);
  Metrics_descriptor_ = file->message_type(1);
  static const int Metrics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, metrics_),
  };
  Metrics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metrics_descriptor_,
      Metrics::default_instance_,
      Metrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metrics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metrics));
  Hyperparams_descriptor_ = file->message_type(2);
  static const int Hyperparams_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hyperparams, base_learningrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hyperparams, learningrate_decay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hyperparams, learningrate_decay_half_life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hyperparams, initial_momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hyperparams, final_momentum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hyperparams, momentum_change_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hyperparams, select_model_criterion_),
  };
  Hyperparams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hyperparams_descriptor_,
      Hyperparams::default_instance_,
      Hyperparams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hyperparams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hyperparams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hyperparams));
  Hyperparams_Decay_descriptor_ = Hyperparams_descriptor_->enum_type(0);
  Hyperparams_BestModelCriterion_descriptor_ = Hyperparams_descriptor_->enum_type(1);
  NodeData_descriptor_ = file->message_type(3);
  static const int NodeData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, dimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, input_start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, hyper_params_),
  };
  NodeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeData_descriptor_,
      NodeData::default_instance_,
      NodeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeData));
  NodeData_NodeType_descriptor_ = NodeData_descriptor_->enum_type(0);
  EdgeData_descriptor_ = file->message_type(4);
  static const int EdgeData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, directed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, node1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, node2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, hyper_params_),
  };
  EdgeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EdgeData_descriptor_,
      EdgeData::default_instance_,
      EdgeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EdgeData));
  SpnLayerInit_descriptor_ = file->message_type(5);
  static const int SpnLayerInit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnLayerInit, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnLayerInit, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnLayerInit, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnLayerInit, product_combinations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnLayerInit, input_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnLayerInit, node_list_),
  };
  SpnLayerInit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpnLayerInit_descriptor_,
      SpnLayerInit::default_instance_,
      SpnLayerInit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnLayerInit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnLayerInit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpnLayerInit));
  SpnData_descriptor_ = file->message_type(6);
  static const int SpnData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnData, node_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnData, adjacency_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnData, input_indices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnData, layers_),
  };
  SpnData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpnData_descriptor_,
      SpnData::default_instance_,
      SpnData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpnData));
  ModelData_descriptor_ = file->message_type(7);
  static const int ModelData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, model_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, spn_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, hyper_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, edges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, train_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, valid_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, test_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, valid_metric_best_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, train_metric_es_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, test_metric_es_),
  };
  ModelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelData_descriptor_,
      ModelData::default_instance_,
      ModelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelData));
  ModelData_ModelType_descriptor_ = ModelData_descriptor_->enum_type(0);
  Operation_descriptor_ = file->message_type(8);
  static const int Operation_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, optimizer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, stop_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, operation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, data_proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, eval_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, checkpoint_after_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, checkpoint_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, randomize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, verbose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, normalize_each_train_step_),
  };
  Operation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operation_descriptor_,
      Operation::default_instance_,
      Operation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operation));
  Operation_StopCondition_descriptor_ = Operation_descriptor_->nested_type(0);
  static const int Operation_StopCondition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_StopCondition, all_processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_StopCondition, steps_),
  };
  Operation_StopCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operation_StopCondition_descriptor_,
      Operation_StopCondition::default_instance_,
      Operation_StopCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_StopCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation_StopCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operation_StopCondition));
  Operation_Optimizer_descriptor_ = Operation_descriptor_->enum_type(0);
  Operation_OperationType_descriptor_ = Operation_descriptor_->enum_type(1);
  DatasetInfo_descriptor_ = file->message_type(9);
  static const int DatasetInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInfo, file_pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInfo, dimensions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInfo, type_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInfo, data_format_),
  };
  DatasetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatasetInfo_descriptor_,
      DatasetInfo::default_instance_,
      DatasetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatasetInfo));
  DatasetInfo_DataType_descriptor_ = DatasetInfo_descriptor_->enum_type(0);
  DatasetInfo_DataFormat_descriptor_ = DatasetInfo_descriptor_->enum_type(1);
  DatabaseInfo_descriptor_ = file->message_type(10);
  static const int DatabaseInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseInfo, data_handler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseInfo, main_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseInfo, gpu_memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseInfo, path_prefix_),
  };
  DatabaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatabaseInfo_descriptor_,
      DatabaseInfo::default_instance_,
      DatabaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatabaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatabaseInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_deeplearn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metric_descriptor_, &Metric::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metrics_descriptor_, &Metrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hyperparams_descriptor_, &Hyperparams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeData_descriptor_, &NodeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EdgeData_descriptor_, &EdgeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpnLayerInit_descriptor_, &SpnLayerInit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpnData_descriptor_, &SpnData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelData_descriptor_, &ModelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operation_descriptor_, &Operation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operation_StopCondition_descriptor_, &Operation_StopCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatasetInfo_descriptor_, &DatasetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatabaseInfo_descriptor_, &DatabaseInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_deeplearn_2eproto() {
  delete Metric::default_instance_;
  delete Metric_reflection_;
  delete Metrics::default_instance_;
  delete Metrics_reflection_;
  delete Hyperparams::default_instance_;
  delete Hyperparams_reflection_;
  delete NodeData::default_instance_;
  delete NodeData_reflection_;
  delete EdgeData::default_instance_;
  delete EdgeData_reflection_;
  delete SpnLayerInit::default_instance_;
  delete SpnLayerInit_reflection_;
  delete SpnData::default_instance_;
  delete SpnData_reflection_;
  delete ModelData::default_instance_;
  delete ModelData_reflection_;
  delete Operation::default_instance_;
  delete Operation_reflection_;
  delete Operation::_default_name_;
  delete Operation_StopCondition::default_instance_;
  delete Operation_StopCondition_reflection_;
  delete DatasetInfo::default_instance_;
  delete DatasetInfo_reflection_;
  delete DatabaseInfo::default_instance_;
  delete DatabaseInfo_reflection_;
  delete DatabaseInfo::_default_data_handler_;
}

void protobuf_AddDesc_deeplearn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017deeplearn.proto\022\005model\"\205\001\n\006Metric\022+\n\004t"
    "ype\030\001 \002(\0162\030.model.Metric.MetricType:\003NLL"
    "\022\r\n\005steps\030\002 \003(\005\022\016\n\006values\030\003 \003(\002\"/\n\nMetri"
    "cType\022\007\n\003NLL\020\001\022\030\n\024CLASSIFICATION_ERROR\020\002"
    "\")\n\007Metrics\022\036\n\007metrics\030\001 \003(\0132\r.model.Met"
    "ric\"\345\003\n\013Hyperparams\022\037\n\021base_learningrate"
    "\030\001 \001(\002:\0040.01\022@\n\022learningrate_decay\030\002 \001(\016"
    "2\030.model.Hyperparams.Decay:\nDECAY_NONE\022*"
    "\n\034learningrate_decay_half_life\030\003 \001(\005:\00410"
    "00\022\033\n\020initial_momentum\030\004 \001(\002:\0010\022\031\n\016final"
    "_momentum\030\005 \001(\002:\0010\022!\n\025momentum_change_st"
    "eps\030\006 \001(\005:\00210\022U\n\026select_model_criterion\030"
    "\007 \001(\0162%.model.Hyperparams.BestModelCrite"
    "rion:\016CRITERION_NONE\"C\n\005Decay\022\016\n\nDECAY_N"
    "ONE\020\000\022\023\n\017DECAY_INVERSE_T\020\001\022\025\n\021DECAY_EXPO"
    "NENTIAL\020\002\"P\n\022BestModelCriterion\022\022\n\016CRITE"
    "RION_NONE\020\000\022\021\n\rCRITERION_NLL\020\001\022\023\n\017CRITER"
    "ION_ERROR\020\002\"\363\001\n\010NodeData\022\014\n\004name\030\001 \002(\t\022&"
    "\n\004type\030\002 \002(\0162\030.model.NodeData.NodeType\022\021"
    "\n\tdimension\030\003 \002(\005\022\031\n\021input_start_index\030\004"
    " \001(\005\022\014\n\004bias\030\005 \001(\014\022(\n\014hyper_params\030\006 \001(\013"
    "2\022.model.Hyperparams\"K\n\010NodeType\022\t\n\005INPU"
    "T\020\000\022\n\n\006HIDDEN\020\001\022\t\n\005QUERY\020\002\022\013\n\007PRODUCT\020\003\022"
    "\007\n\003SUM\020\004\022\007\n\003MAX\020\005\"z\n\010EdgeData\022\026\n\010directe"
    "d\030\001 \001(\010:\004true\022\016\n\006weight\030\002 \001(\014\022\r\n\005node1\030\003"
    " \001(\t\022\r\n\005node2\030\004 \001(\t\022(\n\014hyper_params\030\005 \001("
    "\0132\022.model.Hyperparams\"\235\001\n\014SpnLayerInit\022\014"
    "\n\004name\030\001 \002(\t\022&\n\004type\030\002 \001(\0162\030.model.NodeD"
    "ata.NodeType\022\014\n\004size\030\003 \001(\005\022\037\n\024product_co"
    "mbinations\030\004 \001(\005:\0013\022\025\n\rinput_indices\030\005 \001"
    "(\t\022\021\n\tnode_list\030\006 \001(\t\"r\n\007SpnData\022\021\n\tnode"
    "_list\030\001 \001(\t\022\030\n\020adjacency_matrix\030\002 \001(\t\022\025\n"
    "\rinput_indices\030\003 \001(\t\022#\n\006layers\030\004 \003(\0132\023.m"
    "odel.SpnLayerInit\"\333\003\n\tModelData\022\014\n\004name\030"
    "\001 \002(\t\022.\n\nmodel_type\030\002 \002(\0162\032.model.ModelD"
    "ata.ModelType\022 \n\010spn_data\030\003 \001(\0132\016.model."
    "SpnData\022(\n\014hyper_params\030\004 \001(\0132\022.model.Hy"
    "perparams\022\036\n\005nodes\030\005 \003(\0132\017.model.NodeDat"
    "a\022\036\n\005edges\030\006 \003(\0132\017.model.EdgeData\022%\n\rtra"
    "in_metrics\030\007 \001(\0132\016.model.Metrics\022%\n\rvali"
    "d_metrics\030\010 \001(\0132\016.model.Metrics\022$\n\014test_"
    "metrics\030\t \001(\0132\016.model.Metrics\022)\n\021valid_m"
    "etric_best\030\n \001(\0132\016.model.Metrics\022\'\n\017trai"
    "n_metric_es\030\013 \001(\0132\016.model.Metrics\022&\n\016tes"
    "t_metric_es\030\014 \001(\0132\016.model.Metrics\"\024\n\tMod"
    "elType\022\007\n\003SPN\020\000\"\241\005\n\tOperation\022\027\n\004name\030\001 "
    "\002(\t:\toperation\022\?\n\toptimizer\030\002 \001(\0162\032.mode"
    "l.Operation.Optimizer:\020GRADIENT_DESCENT\022"
    "6\n\016stop_condition\030\003 \001(\0132\036.model.Operatio"
    "n.StopCondition\022=\n\016operation_type\030\004 \001(\0162"
    "\036.model.Operation.OperationType:\005TRAIN\022\027"
    "\n\nbatch_size\030\005 \001(\005:\003100\022\022\n\ndata_proto\030\006 "
    "\001(\t\022\027\n\neval_after\030\007 \001(\005:\003500\022\036\n\020checkpoi"
    "nt_after\030\010 \001(\005:\0041000\022\034\n\024checkpoint_direc"
    "tory\030\t \001(\t\022\030\n\trandomize\030\n \001(\010:\005false\022\027\n\013"
    "random_seed\030\013 \001(\005:\00242\022\025\n\007verbose\030\014 \001(\010:\004"
    "true\022\'\n\031normalize_each_train_step\030\r \001(\010:"
    "\004true\032B\n\rStopCondition\022\033\n\rall_processed\030"
    "\001 \001(\010:\004true\022\024\n\005steps\030\002 \001(\005:\00510000\"b\n\tOpt"
    "imizer\022\024\n\020GRADIENT_DESCENT\020\000\022\031\n\025HARD_GRA"
    "DIENT_DESCENT\020\001\022\006\n\002EM\020\002\022\013\n\007HARD_EM\020\003\022\006\n\002"
    "CD\020\004\022\007\n\003PCD\020\005\"$\n\rOperationType\022\t\n\005TRAIN\020"
    "\000\022\010\n\004TEST\020\001\"\250\002\n\013DatasetInfo\022)\n\004type\030\001 \002("
    "\0162\033.model.DatasetInfo.DataType\022\024\n\014file_p"
    "attern\030\002 \002(\t\022\014\n\004size\030\003 \002(\005\022\022\n\ndimensions"
    "\030\004 \002(\005\022\024\n\ttype_size\030\005 \001(\005:\0014\022@\n\013data_for"
    "mat\030\006 \001(\0162\035.model.DatasetInfo.DataFormat"
    ":\014BOOST_MATRIX\"5\n\010DataType\022\r\n\tTRAIN_SET\020"
    "\000\022\014\n\010EVAL_SET\020\001\022\014\n\010TEST_SET\020\002\"\'\n\nDataFor"
    "mat\022\020\n\014BOOST_MATRIX\020\000\022\007\n\003CSV\020\001\"\247\001\n\014Datab"
    "aseInfo\022\014\n\004name\030\001 \002(\t\022 \n\004data\030\002 \003(\0132\022.mo"
    "del.DatasetInfo\022\037\n\014data_handler\030\003 \001(\t:\td"
    "eeplearn\022\026\n\013main_memory\030\004 \001(\002:\0012\022\027\n\ngpu_"
    "memory\030\005 \001(\002:\0031.5\022\025\n\013path_prefix\030\006 \001(\t:\000", 2960);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "deeplearn.proto", &protobuf_RegisterTypes);
  Metric::default_instance_ = new Metric();
  Metrics::default_instance_ = new Metrics();
  Hyperparams::default_instance_ = new Hyperparams();
  NodeData::default_instance_ = new NodeData();
  EdgeData::default_instance_ = new EdgeData();
  SpnLayerInit::default_instance_ = new SpnLayerInit();
  SpnData::default_instance_ = new SpnData();
  ModelData::default_instance_ = new ModelData();
  Operation::_default_name_ =
      new ::std::string("operation", 9);
  Operation::default_instance_ = new Operation();
  Operation_StopCondition::default_instance_ = new Operation_StopCondition();
  DatasetInfo::default_instance_ = new DatasetInfo();
  DatabaseInfo::_default_data_handler_ =
      new ::std::string("deeplearn", 9);
  DatabaseInfo::default_instance_ = new DatabaseInfo();
  Metric::default_instance_->InitAsDefaultInstance();
  Metrics::default_instance_->InitAsDefaultInstance();
  Hyperparams::default_instance_->InitAsDefaultInstance();
  NodeData::default_instance_->InitAsDefaultInstance();
  EdgeData::default_instance_->InitAsDefaultInstance();
  SpnLayerInit::default_instance_->InitAsDefaultInstance();
  SpnData::default_instance_->InitAsDefaultInstance();
  ModelData::default_instance_->InitAsDefaultInstance();
  Operation::default_instance_->InitAsDefaultInstance();
  Operation_StopCondition::default_instance_->InitAsDefaultInstance();
  DatasetInfo::default_instance_->InitAsDefaultInstance();
  DatabaseInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_deeplearn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_deeplearn_2eproto {
  StaticDescriptorInitializer_deeplearn_2eproto() {
    protobuf_AddDesc_deeplearn_2eproto();
  }
} static_descriptor_initializer_deeplearn_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Metric_MetricType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metric_MetricType_descriptor_;
}
bool Metric_MetricType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Metric_MetricType Metric::NLL;
const Metric_MetricType Metric::CLASSIFICATION_ERROR;
const Metric_MetricType Metric::MetricType_MIN;
const Metric_MetricType Metric::MetricType_MAX;
const int Metric::MetricType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Metric::kTypeFieldNumber;
const int Metric::kStepsFieldNumber;
const int Metric::kValuesFieldNumber;
#endif  // !_MSC_VER

Metric::Metric()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Metric::InitAsDefaultInstance() {
}

Metric::Metric(const Metric& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Metric::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metric::~Metric() {
  SharedDtor();
}

void Metric::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metric_descriptor_;
}

const Metric& Metric::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

Metric* Metric::default_instance_ = NULL;

Metric* Metric::New() const {
  return new Metric;
}

void Metric::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  steps_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .model.Metric.MetricType type = 1 [default = NLL];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::Metric_MetricType_IsValid(value)) {
            set_type(static_cast< ::model::Metric_MetricType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_steps;
        break;
      }

      // repeated int32 steps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_steps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_steps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_steps;
        if (input->ExpectTag(29)) goto parse_values;
        break;
      }

      // repeated float values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Metric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .model.Metric.MetricType type = 1 [default = NLL];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated int32 steps = 2;
  for (int i = 0; i < this->steps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->steps(i), output);
  }

  // repeated float values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Metric::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .model.Metric.MetricType type = 1 [default = NLL];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated int32 steps = 2;
  for (int i = 0; i < this->steps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->steps(i), target);
  }

  // repeated float values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Metric::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .model.Metric.MetricType type = 1 [default = NLL];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated int32 steps = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->steps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->steps(i));
    }
    total_size += 1 * this->steps_size() + data_size;
  }

  // repeated float values = 3;
  {
    int data_size = 0;
    data_size = 4 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metric::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metric* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metric*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metric::MergeFrom(const Metric& from) {
  GOOGLE_CHECK_NE(&from, this);
  steps_.MergeFrom(from.steps_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metric::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metric::CopyFrom(const Metric& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metric::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Metric::Swap(Metric* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    steps_.Swap(&other->steps_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metric_descriptor_;
  metadata.reflection = Metric_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Metrics::kMetricsFieldNumber;
#endif  // !_MSC_VER

Metrics::Metrics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Metrics::InitAsDefaultInstance() {
}

Metrics::Metrics(const Metrics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Metrics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metrics::~Metrics() {
  SharedDtor();
}

void Metrics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metrics_descriptor_;
}

const Metrics& Metrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

Metrics* Metrics::default_instance_ = NULL;

Metrics* Metrics::New() const {
  return new Metrics;
}

void Metrics::Clear() {
  metrics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .model.Metric metrics = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metrics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_metrics;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Metrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .model.Metric metrics = 1;
  for (int i = 0; i < this->metrics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metrics(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Metrics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .model.Metric metrics = 1;
  for (int i = 0; i < this->metrics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metrics(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Metrics::ByteSize() const {
  int total_size = 0;

  // repeated .model.Metric metrics = 1;
  total_size += 1 * this->metrics_size();
  for (int i = 0; i < this->metrics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metrics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metrics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metrics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metrics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metrics::MergeFrom(const Metrics& from) {
  GOOGLE_CHECK_NE(&from, this);
  metrics_.MergeFrom(from.metrics_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metrics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metrics::CopyFrom(const Metrics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metrics::IsInitialized() const {

  for (int i = 0; i < metrics_size(); i++) {
    if (!this->metrics(i).IsInitialized()) return false;
  }
  return true;
}

void Metrics::Swap(Metrics* other) {
  if (other != this) {
    metrics_.Swap(&other->metrics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metrics_descriptor_;
  metadata.reflection = Metrics_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Hyperparams_Decay_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hyperparams_Decay_descriptor_;
}
bool Hyperparams_Decay_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Hyperparams_Decay Hyperparams::DECAY_NONE;
const Hyperparams_Decay Hyperparams::DECAY_INVERSE_T;
const Hyperparams_Decay Hyperparams::DECAY_EXPONENTIAL;
const Hyperparams_Decay Hyperparams::Decay_MIN;
const Hyperparams_Decay Hyperparams::Decay_MAX;
const int Hyperparams::Decay_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Hyperparams_BestModelCriterion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hyperparams_BestModelCriterion_descriptor_;
}
bool Hyperparams_BestModelCriterion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Hyperparams_BestModelCriterion Hyperparams::CRITERION_NONE;
const Hyperparams_BestModelCriterion Hyperparams::CRITERION_NLL;
const Hyperparams_BestModelCriterion Hyperparams::CRITERION_ERROR;
const Hyperparams_BestModelCriterion Hyperparams::BestModelCriterion_MIN;
const Hyperparams_BestModelCriterion Hyperparams::BestModelCriterion_MAX;
const int Hyperparams::BestModelCriterion_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Hyperparams::kBaseLearningrateFieldNumber;
const int Hyperparams::kLearningrateDecayFieldNumber;
const int Hyperparams::kLearningrateDecayHalfLifeFieldNumber;
const int Hyperparams::kInitialMomentumFieldNumber;
const int Hyperparams::kFinalMomentumFieldNumber;
const int Hyperparams::kMomentumChangeStepsFieldNumber;
const int Hyperparams::kSelectModelCriterionFieldNumber;
#endif  // !_MSC_VER

Hyperparams::Hyperparams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hyperparams::InitAsDefaultInstance() {
}

Hyperparams::Hyperparams(const Hyperparams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hyperparams::SharedCtor() {
  _cached_size_ = 0;
  base_learningrate_ = 0.01f;
  learningrate_decay_ = 0;
  learningrate_decay_half_life_ = 1000;
  initial_momentum_ = 0;
  final_momentum_ = 0;
  momentum_change_steps_ = 10;
  select_model_criterion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hyperparams::~Hyperparams() {
  SharedDtor();
}

void Hyperparams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hyperparams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hyperparams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hyperparams_descriptor_;
}

const Hyperparams& Hyperparams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

Hyperparams* Hyperparams::default_instance_ = NULL;

Hyperparams* Hyperparams::New() const {
  return new Hyperparams;
}

void Hyperparams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_learningrate_ = 0.01f;
    learningrate_decay_ = 0;
    learningrate_decay_half_life_ = 1000;
    initial_momentum_ = 0;
    final_momentum_ = 0;
    momentum_change_steps_ = 10;
    select_model_criterion_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hyperparams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float base_learningrate = 1 [default = 0.01];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &base_learningrate_)));
          set_has_base_learningrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_learningrate_decay;
        break;
      }

      // optional .model.Hyperparams.Decay learningrate_decay = 2 [default = DECAY_NONE];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learningrate_decay:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::Hyperparams_Decay_IsValid(value)) {
            set_learningrate_decay(static_cast< ::model::Hyperparams_Decay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_learningrate_decay_half_life;
        break;
      }

      // optional int32 learningrate_decay_half_life = 3 [default = 1000];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learningrate_decay_half_life:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learningrate_decay_half_life_)));
          set_has_learningrate_decay_half_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_initial_momentum;
        break;
      }

      // optional float initial_momentum = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_initial_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_momentum_)));
          set_has_initial_momentum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_final_momentum;
        break;
      }

      // optional float final_momentum = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_final_momentum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &final_momentum_)));
          set_has_final_momentum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_momentum_change_steps;
        break;
      }

      // optional int32 momentum_change_steps = 6 [default = 10];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_momentum_change_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momentum_change_steps_)));
          set_has_momentum_change_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_select_model_criterion;
        break;
      }

      // optional .model.Hyperparams.BestModelCriterion select_model_criterion = 7 [default = CRITERION_NONE];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_select_model_criterion:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::Hyperparams_BestModelCriterion_IsValid(value)) {
            set_select_model_criterion(static_cast< ::model::Hyperparams_BestModelCriterion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hyperparams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float base_learningrate = 1 [default = 0.01];
  if (has_base_learningrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->base_learningrate(), output);
  }

  // optional .model.Hyperparams.Decay learningrate_decay = 2 [default = DECAY_NONE];
  if (has_learningrate_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->learningrate_decay(), output);
  }

  // optional int32 learningrate_decay_half_life = 3 [default = 1000];
  if (has_learningrate_decay_half_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->learningrate_decay_half_life(), output);
  }

  // optional float initial_momentum = 4 [default = 0];
  if (has_initial_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->initial_momentum(), output);
  }

  // optional float final_momentum = 5 [default = 0];
  if (has_final_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->final_momentum(), output);
  }

  // optional int32 momentum_change_steps = 6 [default = 10];
  if (has_momentum_change_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->momentum_change_steps(), output);
  }

  // optional .model.Hyperparams.BestModelCriterion select_model_criterion = 7 [default = CRITERION_NONE];
  if (has_select_model_criterion()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->select_model_criterion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hyperparams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float base_learningrate = 1 [default = 0.01];
  if (has_base_learningrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->base_learningrate(), target);
  }

  // optional .model.Hyperparams.Decay learningrate_decay = 2 [default = DECAY_NONE];
  if (has_learningrate_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->learningrate_decay(), target);
  }

  // optional int32 learningrate_decay_half_life = 3 [default = 1000];
  if (has_learningrate_decay_half_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->learningrate_decay_half_life(), target);
  }

  // optional float initial_momentum = 4 [default = 0];
  if (has_initial_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->initial_momentum(), target);
  }

  // optional float final_momentum = 5 [default = 0];
  if (has_final_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->final_momentum(), target);
  }

  // optional int32 momentum_change_steps = 6 [default = 10];
  if (has_momentum_change_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->momentum_change_steps(), target);
  }

  // optional .model.Hyperparams.BestModelCriterion select_model_criterion = 7 [default = CRITERION_NONE];
  if (has_select_model_criterion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->select_model_criterion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hyperparams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float base_learningrate = 1 [default = 0.01];
    if (has_base_learningrate()) {
      total_size += 1 + 4;
    }

    // optional .model.Hyperparams.Decay learningrate_decay = 2 [default = DECAY_NONE];
    if (has_learningrate_decay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->learningrate_decay());
    }

    // optional int32 learningrate_decay_half_life = 3 [default = 1000];
    if (has_learningrate_decay_half_life()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learningrate_decay_half_life());
    }

    // optional float initial_momentum = 4 [default = 0];
    if (has_initial_momentum()) {
      total_size += 1 + 4;
    }

    // optional float final_momentum = 5 [default = 0];
    if (has_final_momentum()) {
      total_size += 1 + 4;
    }

    // optional int32 momentum_change_steps = 6 [default = 10];
    if (has_momentum_change_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->momentum_change_steps());
    }

    // optional .model.Hyperparams.BestModelCriterion select_model_criterion = 7 [default = CRITERION_NONE];
    if (has_select_model_criterion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->select_model_criterion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hyperparams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hyperparams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hyperparams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hyperparams::MergeFrom(const Hyperparams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_learningrate()) {
      set_base_learningrate(from.base_learningrate());
    }
    if (from.has_learningrate_decay()) {
      set_learningrate_decay(from.learningrate_decay());
    }
    if (from.has_learningrate_decay_half_life()) {
      set_learningrate_decay_half_life(from.learningrate_decay_half_life());
    }
    if (from.has_initial_momentum()) {
      set_initial_momentum(from.initial_momentum());
    }
    if (from.has_final_momentum()) {
      set_final_momentum(from.final_momentum());
    }
    if (from.has_momentum_change_steps()) {
      set_momentum_change_steps(from.momentum_change_steps());
    }
    if (from.has_select_model_criterion()) {
      set_select_model_criterion(from.select_model_criterion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hyperparams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hyperparams::CopyFrom(const Hyperparams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hyperparams::IsInitialized() const {

  return true;
}

void Hyperparams::Swap(Hyperparams* other) {
  if (other != this) {
    std::swap(base_learningrate_, other->base_learningrate_);
    std::swap(learningrate_decay_, other->learningrate_decay_);
    std::swap(learningrate_decay_half_life_, other->learningrate_decay_half_life_);
    std::swap(initial_momentum_, other->initial_momentum_);
    std::swap(final_momentum_, other->final_momentum_);
    std::swap(momentum_change_steps_, other->momentum_change_steps_);
    std::swap(select_model_criterion_, other->select_model_criterion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hyperparams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hyperparams_descriptor_;
  metadata.reflection = Hyperparams_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NodeData_NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeData_NodeType_descriptor_;
}
bool NodeData_NodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NodeData_NodeType NodeData::INPUT;
const NodeData_NodeType NodeData::HIDDEN;
const NodeData_NodeType NodeData::QUERY;
const NodeData_NodeType NodeData::PRODUCT;
const NodeData_NodeType NodeData::SUM;
const NodeData_NodeType NodeData::MAX;
const NodeData_NodeType NodeData::NodeType_MIN;
const NodeData_NodeType NodeData::NodeType_MAX;
const int NodeData::NodeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NodeData::kNameFieldNumber;
const int NodeData::kTypeFieldNumber;
const int NodeData::kDimensionFieldNumber;
const int NodeData::kInputStartIndexFieldNumber;
const int NodeData::kBiasFieldNumber;
const int NodeData::kHyperParamsFieldNumber;
#endif  // !_MSC_VER

NodeData::NodeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeData::InitAsDefaultInstance() {
  hyper_params_ = const_cast< ::model::Hyperparams*>(&::model::Hyperparams::default_instance());
}

NodeData::NodeData(const NodeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  dimension_ = 0;
  input_start_index_ = 0;
  bias_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hyper_params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeData::~NodeData() {
  SharedDtor();
}

void NodeData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (bias_ != &::google::protobuf::internal::kEmptyString) {
    delete bias_;
  }
  if (this != default_instance_) {
    delete hyper_params_;
  }
}

void NodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeData_descriptor_;
}

const NodeData& NodeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

NodeData* NodeData::default_instance_ = NULL;

NodeData* NodeData::New() const {
  return new NodeData;
}

void NodeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    dimension_ = 0;
    input_start_index_ = 0;
    if (has_bias()) {
      if (bias_ != &::google::protobuf::internal::kEmptyString) {
        bias_->clear();
      }
    }
    if (has_hyper_params()) {
      if (hyper_params_ != NULL) hyper_params_->::model::Hyperparams::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .model.NodeData.NodeType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::NodeData_NodeType_IsValid(value)) {
            set_type(static_cast< ::model::NodeData_NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dimension;
        break;
      }

      // required int32 dimension = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_)));
          set_has_dimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_input_start_index;
        break;
      }

      // optional int32 input_start_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_start_index_)));
          set_has_input_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bias;
        break;
      }

      // optional bytes bias = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bias()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hyper_params;
        break;
      }

      // optional .model.Hyperparams hyper_params = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hyper_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hyper_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .model.NodeData.NodeType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 dimension = 3;
  if (has_dimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dimension(), output);
  }

  // optional int32 input_start_index = 4;
  if (has_input_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->input_start_index(), output);
  }

  // optional bytes bias = 5;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->bias(), output);
  }

  // optional .model.Hyperparams hyper_params = 6;
  if (has_hyper_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->hyper_params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .model.NodeData.NodeType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 dimension = 3;
  if (has_dimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dimension(), target);
  }

  // optional int32 input_start_index = 4;
  if (has_input_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->input_start_index(), target);
  }

  // optional bytes bias = 5;
  if (has_bias()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->bias(), target);
  }

  // optional .model.Hyperparams hyper_params = 6;
  if (has_hyper_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->hyper_params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .model.NodeData.NodeType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 dimension = 3;
    if (has_dimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension());
    }

    // optional int32 input_start_index = 4;
    if (has_input_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_start_index());
    }

    // optional bytes bias = 5;
    if (has_bias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bias());
    }

    // optional .model.Hyperparams hyper_params = 6;
    if (has_hyper_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hyper_params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeData::MergeFrom(const NodeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dimension()) {
      set_dimension(from.dimension());
    }
    if (from.has_input_start_index()) {
      set_input_start_index(from.input_start_index());
    }
    if (from.has_bias()) {
      set_bias(from.bias());
    }
    if (from.has_hyper_params()) {
      mutable_hyper_params()->::model::Hyperparams::MergeFrom(from.hyper_params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeData::CopyFrom(const NodeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NodeData::Swap(NodeData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(dimension_, other->dimension_);
    std::swap(input_start_index_, other->input_start_index_);
    std::swap(bias_, other->bias_);
    std::swap(hyper_params_, other->hyper_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeData_descriptor_;
  metadata.reflection = NodeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EdgeData::kDirectedFieldNumber;
const int EdgeData::kWeightFieldNumber;
const int EdgeData::kNode1FieldNumber;
const int EdgeData::kNode2FieldNumber;
const int EdgeData::kHyperParamsFieldNumber;
#endif  // !_MSC_VER

EdgeData::EdgeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EdgeData::InitAsDefaultInstance() {
  hyper_params_ = const_cast< ::model::Hyperparams*>(&::model::Hyperparams::default_instance());
}

EdgeData::EdgeData(const EdgeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EdgeData::SharedCtor() {
  _cached_size_ = 0;
  directed_ = true;
  weight_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  node1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  node2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hyper_params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EdgeData::~EdgeData() {
  SharedDtor();
}

void EdgeData::SharedDtor() {
  if (weight_ != &::google::protobuf::internal::kEmptyString) {
    delete weight_;
  }
  if (node1_ != &::google::protobuf::internal::kEmptyString) {
    delete node1_;
  }
  if (node2_ != &::google::protobuf::internal::kEmptyString) {
    delete node2_;
  }
  if (this != default_instance_) {
    delete hyper_params_;
  }
}

void EdgeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdgeData_descriptor_;
}

const EdgeData& EdgeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

EdgeData* EdgeData::default_instance_ = NULL;

EdgeData* EdgeData::New() const {
  return new EdgeData;
}

void EdgeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    directed_ = true;
    if (has_weight()) {
      if (weight_ != &::google::protobuf::internal::kEmptyString) {
        weight_->clear();
      }
    }
    if (has_node1()) {
      if (node1_ != &::google::protobuf::internal::kEmptyString) {
        node1_->clear();
      }
    }
    if (has_node2()) {
      if (node2_ != &::google::protobuf::internal::kEmptyString) {
        node2_->clear();
      }
    }
    if (has_hyper_params()) {
      if (hyper_params_ != NULL) hyper_params_->::model::Hyperparams::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EdgeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool directed = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &directed_)));
          set_has_directed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_weight;
        break;
      }

      // optional bytes weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_weight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node1;
        break;
      }

      // optional string node1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node1().data(), this->node1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_node2;
        break;
      }

      // optional string node2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node2().data(), this->node2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hyper_params;
        break;
      }

      // optional .model.Hyperparams hyper_params = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hyper_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hyper_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EdgeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool directed = 1 [default = true];
  if (has_directed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->directed(), output);
  }

  // optional bytes weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->weight(), output);
  }

  // optional string node1 = 3;
  if (has_node1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node1().data(), this->node1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->node1(), output);
  }

  // optional string node2 = 4;
  if (has_node2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node2().data(), this->node2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->node2(), output);
  }

  // optional .model.Hyperparams hyper_params = 5;
  if (has_hyper_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hyper_params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EdgeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool directed = 1 [default = true];
  if (has_directed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->directed(), target);
  }

  // optional bytes weight = 2;
  if (has_weight()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->weight(), target);
  }

  // optional string node1 = 3;
  if (has_node1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node1().data(), this->node1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node1(), target);
  }

  // optional string node2 = 4;
  if (has_node2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node2().data(), this->node2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node2(), target);
  }

  // optional .model.Hyperparams hyper_params = 5;
  if (has_hyper_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hyper_params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EdgeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool directed = 1 [default = true];
    if (has_directed()) {
      total_size += 1 + 1;
    }

    // optional bytes weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->weight());
    }

    // optional string node1 = 3;
    if (has_node1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node1());
    }

    // optional string node2 = 4;
    if (has_node2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node2());
    }

    // optional .model.Hyperparams hyper_params = 5;
    if (has_hyper_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hyper_params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EdgeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EdgeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EdgeData::MergeFrom(const EdgeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_directed()) {
      set_directed(from.directed());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_node1()) {
      set_node1(from.node1());
    }
    if (from.has_node2()) {
      set_node2(from.node2());
    }
    if (from.has_hyper_params()) {
      mutable_hyper_params()->::model::Hyperparams::MergeFrom(from.hyper_params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EdgeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeData::CopyFrom(const EdgeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeData::IsInitialized() const {

  return true;
}

void EdgeData::Swap(EdgeData* other) {
  if (other != this) {
    std::swap(directed_, other->directed_);
    std::swap(weight_, other->weight_);
    std::swap(node1_, other->node1_);
    std::swap(node2_, other->node2_);
    std::swap(hyper_params_, other->hyper_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EdgeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdgeData_descriptor_;
  metadata.reflection = EdgeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpnLayerInit::kNameFieldNumber;
const int SpnLayerInit::kTypeFieldNumber;
const int SpnLayerInit::kSizeFieldNumber;
const int SpnLayerInit::kProductCombinationsFieldNumber;
const int SpnLayerInit::kInputIndicesFieldNumber;
const int SpnLayerInit::kNodeListFieldNumber;
#endif  // !_MSC_VER

SpnLayerInit::SpnLayerInit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpnLayerInit::InitAsDefaultInstance() {
}

SpnLayerInit::SpnLayerInit(const SpnLayerInit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpnLayerInit::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  size_ = 0;
  product_combinations_ = 3;
  input_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  node_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpnLayerInit::~SpnLayerInit() {
  SharedDtor();
}

void SpnLayerInit::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (input_indices_ != &::google::protobuf::internal::kEmptyString) {
    delete input_indices_;
  }
  if (node_list_ != &::google::protobuf::internal::kEmptyString) {
    delete node_list_;
  }
  if (this != default_instance_) {
  }
}

void SpnLayerInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpnLayerInit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpnLayerInit_descriptor_;
}

const SpnLayerInit& SpnLayerInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

SpnLayerInit* SpnLayerInit::default_instance_ = NULL;

SpnLayerInit* SpnLayerInit::New() const {
  return new SpnLayerInit;
}

void SpnLayerInit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    size_ = 0;
    product_combinations_ = 3;
    if (has_input_indices()) {
      if (input_indices_ != &::google::protobuf::internal::kEmptyString) {
        input_indices_->clear();
      }
    }
    if (has_node_list()) {
      if (node_list_ != &::google::protobuf::internal::kEmptyString) {
        node_list_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpnLayerInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .model.NodeData.NodeType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::NodeData_NodeType_IsValid(value)) {
            set_type(static_cast< ::model::NodeData_NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional int32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_product_combinations;
        break;
      }

      // optional int32 product_combinations = 4 [default = 3];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_product_combinations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_combinations_)));
          set_has_product_combinations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_input_indices;
        break;
      }

      // optional string input_indices = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_indices()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input_indices().data(), this->input_indices().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_node_list;
        break;
      }

      // optional string node_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_list().data(), this->node_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpnLayerInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .model.NodeData.NodeType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // optional int32 product_combinations = 4 [default = 3];
  if (has_product_combinations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->product_combinations(), output);
  }

  // optional string input_indices = 5;
  if (has_input_indices()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_indices().data(), this->input_indices().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->input_indices(), output);
  }

  // optional string node_list = 6;
  if (has_node_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_list().data(), this->node_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->node_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpnLayerInit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .model.NodeData.NodeType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // optional int32 product_combinations = 4 [default = 3];
  if (has_product_combinations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->product_combinations(), target);
  }

  // optional string input_indices = 5;
  if (has_input_indices()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_indices().data(), this->input_indices().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->input_indices(), target);
  }

  // optional string node_list = 6;
  if (has_node_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_list().data(), this->node_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->node_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpnLayerInit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .model.NodeData.NodeType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int32 product_combinations = 4 [default = 3];
    if (has_product_combinations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_combinations());
    }

    // optional string input_indices = 5;
    if (has_input_indices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_indices());
    }

    // optional string node_list = 6;
    if (has_node_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpnLayerInit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpnLayerInit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpnLayerInit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpnLayerInit::MergeFrom(const SpnLayerInit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_product_combinations()) {
      set_product_combinations(from.product_combinations());
    }
    if (from.has_input_indices()) {
      set_input_indices(from.input_indices());
    }
    if (from.has_node_list()) {
      set_node_list(from.node_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpnLayerInit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpnLayerInit::CopyFrom(const SpnLayerInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpnLayerInit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SpnLayerInit::Swap(SpnLayerInit* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(product_combinations_, other->product_combinations_);
    std::swap(input_indices_, other->input_indices_);
    std::swap(node_list_, other->node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpnLayerInit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpnLayerInit_descriptor_;
  metadata.reflection = SpnLayerInit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpnData::kNodeListFieldNumber;
const int SpnData::kAdjacencyMatrixFieldNumber;
const int SpnData::kInputIndicesFieldNumber;
const int SpnData::kLayersFieldNumber;
#endif  // !_MSC_VER

SpnData::SpnData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpnData::InitAsDefaultInstance() {
}

SpnData::SpnData(const SpnData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpnData::SharedCtor() {
  _cached_size_ = 0;
  node_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adjacency_matrix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpnData::~SpnData() {
  SharedDtor();
}

void SpnData::SharedDtor() {
  if (node_list_ != &::google::protobuf::internal::kEmptyString) {
    delete node_list_;
  }
  if (adjacency_matrix_ != &::google::protobuf::internal::kEmptyString) {
    delete adjacency_matrix_;
  }
  if (input_indices_ != &::google::protobuf::internal::kEmptyString) {
    delete input_indices_;
  }
  if (this != default_instance_) {
  }
}

void SpnData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpnData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpnData_descriptor_;
}

const SpnData& SpnData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

SpnData* SpnData::default_instance_ = NULL;

SpnData* SpnData::New() const {
  return new SpnData;
}

void SpnData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_list()) {
      if (node_list_ != &::google::protobuf::internal::kEmptyString) {
        node_list_->clear();
      }
    }
    if (has_adjacency_matrix()) {
      if (adjacency_matrix_ != &::google::protobuf::internal::kEmptyString) {
        adjacency_matrix_->clear();
      }
    }
    if (has_input_indices()) {
      if (input_indices_ != &::google::protobuf::internal::kEmptyString) {
        input_indices_->clear();
      }
    }
  }
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpnData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string node_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_list().data(), this->node_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_adjacency_matrix;
        break;
      }

      // optional string adjacency_matrix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adjacency_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adjacency_matrix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adjacency_matrix().data(), this->adjacency_matrix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_input_indices;
        break;
      }

      // optional string input_indices = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_indices()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input_indices().data(), this->input_indices().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_layers;
        break;
      }

      // repeated .model.SpnLayerInit layers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_layers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpnData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string node_list = 1;
  if (has_node_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_list().data(), this->node_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_list(), output);
  }

  // optional string adjacency_matrix = 2;
  if (has_adjacency_matrix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adjacency_matrix().data(), this->adjacency_matrix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->adjacency_matrix(), output);
  }

  // optional string input_indices = 3;
  if (has_input_indices()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_indices().data(), this->input_indices().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input_indices(), output);
  }

  // repeated .model.SpnLayerInit layers = 4;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->layers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpnData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string node_list = 1;
  if (has_node_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_list().data(), this->node_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_list(), target);
  }

  // optional string adjacency_matrix = 2;
  if (has_adjacency_matrix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adjacency_matrix().data(), this->adjacency_matrix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->adjacency_matrix(), target);
  }

  // optional string input_indices = 3;
  if (has_input_indices()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_indices().data(), this->input_indices().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->input_indices(), target);
  }

  // repeated .model.SpnLayerInit layers = 4;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->layers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpnData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string node_list = 1;
    if (has_node_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_list());
    }

    // optional string adjacency_matrix = 2;
    if (has_adjacency_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adjacency_matrix());
    }

    // optional string input_indices = 3;
    if (has_input_indices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_indices());
    }

  }
  // repeated .model.SpnLayerInit layers = 4;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpnData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpnData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpnData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpnData::MergeFrom(const SpnData& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_list()) {
      set_node_list(from.node_list());
    }
    if (from.has_adjacency_matrix()) {
      set_adjacency_matrix(from.adjacency_matrix());
    }
    if (from.has_input_indices()) {
      set_input_indices(from.input_indices());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpnData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpnData::CopyFrom(const SpnData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpnData::IsInitialized() const {

  for (int i = 0; i < layers_size(); i++) {
    if (!this->layers(i).IsInitialized()) return false;
  }
  return true;
}

void SpnData::Swap(SpnData* other) {
  if (other != this) {
    std::swap(node_list_, other->node_list_);
    std::swap(adjacency_matrix_, other->adjacency_matrix_);
    std::swap(input_indices_, other->input_indices_);
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpnData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpnData_descriptor_;
  metadata.reflection = SpnData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ModelData_ModelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelData_ModelType_descriptor_;
}
bool ModelData_ModelType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ModelData_ModelType ModelData::SPN;
const ModelData_ModelType ModelData::ModelType_MIN;
const ModelData_ModelType ModelData::ModelType_MAX;
const int ModelData::ModelType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ModelData::kNameFieldNumber;
const int ModelData::kModelTypeFieldNumber;
const int ModelData::kSpnDataFieldNumber;
const int ModelData::kHyperParamsFieldNumber;
const int ModelData::kNodesFieldNumber;
const int ModelData::kEdgesFieldNumber;
const int ModelData::kTrainMetricsFieldNumber;
const int ModelData::kValidMetricsFieldNumber;
const int ModelData::kTestMetricsFieldNumber;
const int ModelData::kValidMetricBestFieldNumber;
const int ModelData::kTrainMetricEsFieldNumber;
const int ModelData::kTestMetricEsFieldNumber;
#endif  // !_MSC_VER

ModelData::ModelData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelData::InitAsDefaultInstance() {
  spn_data_ = const_cast< ::model::SpnData*>(&::model::SpnData::default_instance());
  hyper_params_ = const_cast< ::model::Hyperparams*>(&::model::Hyperparams::default_instance());
  train_metrics_ = const_cast< ::model::Metrics*>(&::model::Metrics::default_instance());
  valid_metrics_ = const_cast< ::model::Metrics*>(&::model::Metrics::default_instance());
  test_metrics_ = const_cast< ::model::Metrics*>(&::model::Metrics::default_instance());
  valid_metric_best_ = const_cast< ::model::Metrics*>(&::model::Metrics::default_instance());
  train_metric_es_ = const_cast< ::model::Metrics*>(&::model::Metrics::default_instance());
  test_metric_es_ = const_cast< ::model::Metrics*>(&::model::Metrics::default_instance());
}

ModelData::ModelData(const ModelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_type_ = 0;
  spn_data_ = NULL;
  hyper_params_ = NULL;
  train_metrics_ = NULL;
  valid_metrics_ = NULL;
  test_metrics_ = NULL;
  valid_metric_best_ = NULL;
  train_metric_es_ = NULL;
  test_metric_es_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelData::~ModelData() {
  SharedDtor();
}

void ModelData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete spn_data_;
    delete hyper_params_;
    delete train_metrics_;
    delete valid_metrics_;
    delete test_metrics_;
    delete valid_metric_best_;
    delete train_metric_es_;
    delete test_metric_es_;
  }
}

void ModelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelData_descriptor_;
}

const ModelData& ModelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

ModelData* ModelData::default_instance_ = NULL;

ModelData* ModelData::New() const {
  return new ModelData;
}

void ModelData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    model_type_ = 0;
    if (has_spn_data()) {
      if (spn_data_ != NULL) spn_data_->::model::SpnData::Clear();
    }
    if (has_hyper_params()) {
      if (hyper_params_ != NULL) hyper_params_->::model::Hyperparams::Clear();
    }
    if (has_train_metrics()) {
      if (train_metrics_ != NULL) train_metrics_->::model::Metrics::Clear();
    }
    if (has_valid_metrics()) {
      if (valid_metrics_ != NULL) valid_metrics_->::model::Metrics::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_test_metrics()) {
      if (test_metrics_ != NULL) test_metrics_->::model::Metrics::Clear();
    }
    if (has_valid_metric_best()) {
      if (valid_metric_best_ != NULL) valid_metric_best_->::model::Metrics::Clear();
    }
    if (has_train_metric_es()) {
      if (train_metric_es_ != NULL) train_metric_es_->::model::Metrics::Clear();
    }
    if (has_test_metric_es()) {
      if (test_metric_es_ != NULL) test_metric_es_->::model::Metrics::Clear();
    }
  }
  nodes_.Clear();
  edges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_model_type;
        break;
      }

      // required .model.ModelData.ModelType model_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::ModelData_ModelType_IsValid(value)) {
            set_model_type(static_cast< ::model::ModelData_ModelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spn_data;
        break;
      }

      // optional .model.SpnData spn_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spn_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spn_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hyper_params;
        break;
      }

      // optional .model.Hyperparams hyper_params = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hyper_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hyper_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nodes;
        break;
      }

      // repeated .model.NodeData nodes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nodes;
        if (input->ExpectTag(50)) goto parse_edges;
        break;
      }

      // repeated .model.EdgeData edges = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_edges;
        if (input->ExpectTag(58)) goto parse_train_metrics;
        break;
      }

      // optional .model.Metrics train_metrics = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_metrics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_valid_metrics;
        break;
      }

      // optional .model.Metrics valid_metrics = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_valid_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valid_metrics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_test_metrics;
        break;
      }

      // optional .model.Metrics test_metrics = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_metrics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_valid_metric_best;
        break;
      }

      // optional .model.Metrics valid_metric_best = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_valid_metric_best:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valid_metric_best()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_train_metric_es;
        break;
      }

      // optional .model.Metrics train_metric_es = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_metric_es:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_train_metric_es()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_test_metric_es;
        break;
      }

      // optional .model.Metrics test_metric_es = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_test_metric_es:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_metric_es()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .model.ModelData.ModelType model_type = 2;
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->model_type(), output);
  }

  // optional .model.SpnData spn_data = 3;
  if (has_spn_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spn_data(), output);
  }

  // optional .model.Hyperparams hyper_params = 4;
  if (has_hyper_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hyper_params(), output);
  }

  // repeated .model.NodeData nodes = 5;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nodes(i), output);
  }

  // repeated .model.EdgeData edges = 6;
  for (int i = 0; i < this->edges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->edges(i), output);
  }

  // optional .model.Metrics train_metrics = 7;
  if (has_train_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->train_metrics(), output);
  }

  // optional .model.Metrics valid_metrics = 8;
  if (has_valid_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->valid_metrics(), output);
  }

  // optional .model.Metrics test_metrics = 9;
  if (has_test_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->test_metrics(), output);
  }

  // optional .model.Metrics valid_metric_best = 10;
  if (has_valid_metric_best()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->valid_metric_best(), output);
  }

  // optional .model.Metrics train_metric_es = 11;
  if (has_train_metric_es()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->train_metric_es(), output);
  }

  // optional .model.Metrics test_metric_es = 12;
  if (has_test_metric_es()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->test_metric_es(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .model.ModelData.ModelType model_type = 2;
  if (has_model_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->model_type(), target);
  }

  // optional .model.SpnData spn_data = 3;
  if (has_spn_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->spn_data(), target);
  }

  // optional .model.Hyperparams hyper_params = 4;
  if (has_hyper_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hyper_params(), target);
  }

  // repeated .model.NodeData nodes = 5;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->nodes(i), target);
  }

  // repeated .model.EdgeData edges = 6;
  for (int i = 0; i < this->edges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->edges(i), target);
  }

  // optional .model.Metrics train_metrics = 7;
  if (has_train_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->train_metrics(), target);
  }

  // optional .model.Metrics valid_metrics = 8;
  if (has_valid_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->valid_metrics(), target);
  }

  // optional .model.Metrics test_metrics = 9;
  if (has_test_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->test_metrics(), target);
  }

  // optional .model.Metrics valid_metric_best = 10;
  if (has_valid_metric_best()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->valid_metric_best(), target);
  }

  // optional .model.Metrics train_metric_es = 11;
  if (has_train_metric_es()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->train_metric_es(), target);
  }

  // optional .model.Metrics test_metric_es = 12;
  if (has_test_metric_es()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->test_metric_es(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .model.ModelData.ModelType model_type = 2;
    if (has_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model_type());
    }

    // optional .model.SpnData spn_data = 3;
    if (has_spn_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spn_data());
    }

    // optional .model.Hyperparams hyper_params = 4;
    if (has_hyper_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hyper_params());
    }

    // optional .model.Metrics train_metrics = 7;
    if (has_train_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->train_metrics());
    }

    // optional .model.Metrics valid_metrics = 8;
    if (has_valid_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->valid_metrics());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .model.Metrics test_metrics = 9;
    if (has_test_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_metrics());
    }

    // optional .model.Metrics valid_metric_best = 10;
    if (has_valid_metric_best()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->valid_metric_best());
    }

    // optional .model.Metrics train_metric_es = 11;
    if (has_train_metric_es()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->train_metric_es());
    }

    // optional .model.Metrics test_metric_es = 12;
    if (has_test_metric_es()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->test_metric_es());
    }

  }
  // repeated .model.NodeData nodes = 5;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  // repeated .model.EdgeData edges = 6;
  total_size += 1 * this->edges_size();
  for (int i = 0; i < this->edges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelData::MergeFrom(const ModelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  edges_.MergeFrom(from.edges_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_model_type()) {
      set_model_type(from.model_type());
    }
    if (from.has_spn_data()) {
      mutable_spn_data()->::model::SpnData::MergeFrom(from.spn_data());
    }
    if (from.has_hyper_params()) {
      mutable_hyper_params()->::model::Hyperparams::MergeFrom(from.hyper_params());
    }
    if (from.has_train_metrics()) {
      mutable_train_metrics()->::model::Metrics::MergeFrom(from.train_metrics());
    }
    if (from.has_valid_metrics()) {
      mutable_valid_metrics()->::model::Metrics::MergeFrom(from.valid_metrics());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_test_metrics()) {
      mutable_test_metrics()->::model::Metrics::MergeFrom(from.test_metrics());
    }
    if (from.has_valid_metric_best()) {
      mutable_valid_metric_best()->::model::Metrics::MergeFrom(from.valid_metric_best());
    }
    if (from.has_train_metric_es()) {
      mutable_train_metric_es()->::model::Metrics::MergeFrom(from.train_metric_es());
    }
    if (from.has_test_metric_es()) {
      mutable_test_metric_es()->::model::Metrics::MergeFrom(from.test_metric_es());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelData::CopyFrom(const ModelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_spn_data()) {
    if (!this->spn_data().IsInitialized()) return false;
  }
  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  if (has_train_metrics()) {
    if (!this->train_metrics().IsInitialized()) return false;
  }
  if (has_valid_metrics()) {
    if (!this->valid_metrics().IsInitialized()) return false;
  }
  if (has_test_metrics()) {
    if (!this->test_metrics().IsInitialized()) return false;
  }
  if (has_valid_metric_best()) {
    if (!this->valid_metric_best().IsInitialized()) return false;
  }
  if (has_train_metric_es()) {
    if (!this->train_metric_es().IsInitialized()) return false;
  }
  if (has_test_metric_es()) {
    if (!this->test_metric_es().IsInitialized()) return false;
  }
  return true;
}

void ModelData::Swap(ModelData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(model_type_, other->model_type_);
    std::swap(spn_data_, other->spn_data_);
    std::swap(hyper_params_, other->hyper_params_);
    nodes_.Swap(&other->nodes_);
    edges_.Swap(&other->edges_);
    std::swap(train_metrics_, other->train_metrics_);
    std::swap(valid_metrics_, other->valid_metrics_);
    std::swap(test_metrics_, other->test_metrics_);
    std::swap(valid_metric_best_, other->valid_metric_best_);
    std::swap(train_metric_es_, other->train_metric_es_);
    std::swap(test_metric_es_, other->test_metric_es_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelData_descriptor_;
  metadata.reflection = ModelData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Operation_Optimizer_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_Optimizer_descriptor_;
}
bool Operation_Optimizer_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Operation_Optimizer Operation::GRADIENT_DESCENT;
const Operation_Optimizer Operation::HARD_GRADIENT_DESCENT;
const Operation_Optimizer Operation::EM;
const Operation_Optimizer Operation::HARD_EM;
const Operation_Optimizer Operation::CD;
const Operation_Optimizer Operation::PCD;
const Operation_Optimizer Operation::Optimizer_MIN;
const Operation_Optimizer Operation::Optimizer_MAX;
const int Operation::Optimizer_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Operation_OperationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_OperationType_descriptor_;
}
bool Operation_OperationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Operation_OperationType Operation::TRAIN;
const Operation_OperationType Operation::TEST;
const Operation_OperationType Operation::OperationType_MIN;
const Operation_OperationType Operation::OperationType_MAX;
const int Operation::OperationType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Operation_StopCondition::kAllProcessedFieldNumber;
const int Operation_StopCondition::kStepsFieldNumber;
#endif  // !_MSC_VER

Operation_StopCondition::Operation_StopCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operation_StopCondition::InitAsDefaultInstance() {
}

Operation_StopCondition::Operation_StopCondition(const Operation_StopCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operation_StopCondition::SharedCtor() {
  _cached_size_ = 0;
  all_processed_ = true;
  steps_ = 10000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operation_StopCondition::~Operation_StopCondition() {
  SharedDtor();
}

void Operation_StopCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Operation_StopCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation_StopCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_StopCondition_descriptor_;
}

const Operation_StopCondition& Operation_StopCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

Operation_StopCondition* Operation_StopCondition::default_instance_ = NULL;

Operation_StopCondition* Operation_StopCondition::New() const {
  return new Operation_StopCondition;
}

void Operation_StopCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    all_processed_ = true;
    steps_ = 10000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operation_StopCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool all_processed = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_processed_)));
          set_has_all_processed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_steps;
        break;
      }

      // optional int32 steps = 2 [default = 10000];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steps_)));
          set_has_steps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operation_StopCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool all_processed = 1 [default = true];
  if (has_all_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->all_processed(), output);
  }

  // optional int32 steps = 2 [default = 10000];
  if (has_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->steps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operation_StopCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool all_processed = 1 [default = true];
  if (has_all_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->all_processed(), target);
  }

  // optional int32 steps = 2 [default = 10000];
  if (has_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->steps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operation_StopCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool all_processed = 1 [default = true];
    if (has_all_processed()) {
      total_size += 1 + 1;
    }

    // optional int32 steps = 2 [default = 10000];
    if (has_steps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation_StopCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operation_StopCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation_StopCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation_StopCondition::MergeFrom(const Operation_StopCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_all_processed()) {
      set_all_processed(from.all_processed());
    }
    if (from.has_steps()) {
      set_steps(from.steps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operation_StopCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation_StopCondition::CopyFrom(const Operation_StopCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation_StopCondition::IsInitialized() const {

  return true;
}

void Operation_StopCondition::Swap(Operation_StopCondition* other) {
  if (other != this) {
    std::swap(all_processed_, other->all_processed_);
    std::swap(steps_, other->steps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operation_StopCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_StopCondition_descriptor_;
  metadata.reflection = Operation_StopCondition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Operation::_default_name_ = NULL;
#ifndef _MSC_VER
const int Operation::kNameFieldNumber;
const int Operation::kOptimizerFieldNumber;
const int Operation::kStopConditionFieldNumber;
const int Operation::kOperationTypeFieldNumber;
const int Operation::kBatchSizeFieldNumber;
const int Operation::kDataProtoFieldNumber;
const int Operation::kEvalAfterFieldNumber;
const int Operation::kCheckpointAfterFieldNumber;
const int Operation::kCheckpointDirectoryFieldNumber;
const int Operation::kRandomizeFieldNumber;
const int Operation::kRandomSeedFieldNumber;
const int Operation::kVerboseFieldNumber;
const int Operation::kNormalizeEachTrainStepFieldNumber;
#endif  // !_MSC_VER

Operation::Operation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operation::InitAsDefaultInstance() {
  stop_condition_ = const_cast< ::model::Operation_StopCondition*>(&::model::Operation_StopCondition::default_instance());
}

Operation::Operation(const Operation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  optimizer_ = 0;
  stop_condition_ = NULL;
  operation_type_ = 0;
  batch_size_ = 100;
  data_proto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eval_after_ = 500;
  checkpoint_after_ = 1000;
  checkpoint_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  randomize_ = false;
  random_seed_ = 42;
  verbose_ = true;
  normalize_each_train_step_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operation::~Operation() {
  SharedDtor();
}

void Operation::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (data_proto_ != &::google::protobuf::internal::kEmptyString) {
    delete data_proto_;
  }
  if (checkpoint_directory_ != &::google::protobuf::internal::kEmptyString) {
    delete checkpoint_directory_;
  }
  if (this != default_instance_) {
    delete stop_condition_;
  }
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}

const Operation& Operation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

Operation* Operation::default_instance_ = NULL;

Operation* Operation::New() const {
  return new Operation;
}

void Operation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    optimizer_ = 0;
    if (has_stop_condition()) {
      if (stop_condition_ != NULL) stop_condition_->::model::Operation_StopCondition::Clear();
    }
    operation_type_ = 0;
    batch_size_ = 100;
    if (has_data_proto()) {
      if (data_proto_ != &::google::protobuf::internal::kEmptyString) {
        data_proto_->clear();
      }
    }
    eval_after_ = 500;
    checkpoint_after_ = 1000;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_checkpoint_directory()) {
      if (checkpoint_directory_ != &::google::protobuf::internal::kEmptyString) {
        checkpoint_directory_->clear();
      }
    }
    randomize_ = false;
    random_seed_ = 42;
    verbose_ = true;
    normalize_each_train_step_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1 [default = "operation"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_optimizer;
        break;
      }

      // optional .model.Operation.Optimizer optimizer = 2 [default = GRADIENT_DESCENT];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_optimizer:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::Operation_Optimizer_IsValid(value)) {
            set_optimizer(static_cast< ::model::Operation_Optimizer >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stop_condition;
        break;
      }

      // optional .model.Operation.StopCondition stop_condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stop_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operation_type;
        break;
      }

      // optional .model.Operation.OperationType operation_type = 4 [default = TRAIN];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::Operation_OperationType_IsValid(value)) {
            set_operation_type(static_cast< ::model::Operation_OperationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_batch_size;
        break;
      }

      // optional int32 batch_size = 5 [default = 100];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data_proto;
        break;
      }

      // optional string data_proto = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_proto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_proto().data(), this->data_proto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_eval_after;
        break;
      }

      // optional int32 eval_after = 7 [default = 500];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eval_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eval_after_)));
          set_has_eval_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_checkpoint_after;
        break;
      }

      // optional int32 checkpoint_after = 8 [default = 1000];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_after_)));
          set_has_checkpoint_after();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_checkpoint_directory;
        break;
      }

      // optional string checkpoint_directory = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkpoint_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpoint_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checkpoint_directory().data(), this->checkpoint_directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_randomize;
        break;
      }

      // optional bool randomize = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randomize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_)));
          set_has_randomize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_random_seed;
        break;
      }

      // optional int32 random_seed = 11 [default = 42];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_verbose;
        break;
      }

      // optional bool verbose = 12 [default = true];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_verbose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &verbose_)));
          set_has_verbose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_normalize_each_train_step;
        break;
      }

      // optional bool normalize_each_train_step = 13 [default = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalize_each_train_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_each_train_step_)));
          set_has_normalize_each_train_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1 [default = "operation"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .model.Operation.Optimizer optimizer = 2 [default = GRADIENT_DESCENT];
  if (has_optimizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->optimizer(), output);
  }

  // optional .model.Operation.StopCondition stop_condition = 3;
  if (has_stop_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stop_condition(), output);
  }

  // optional .model.Operation.OperationType operation_type = 4 [default = TRAIN];
  if (has_operation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->operation_type(), output);
  }

  // optional int32 batch_size = 5 [default = 100];
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->batch_size(), output);
  }

  // optional string data_proto = 6;
  if (has_data_proto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_proto().data(), this->data_proto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->data_proto(), output);
  }

  // optional int32 eval_after = 7 [default = 500];
  if (has_eval_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->eval_after(), output);
  }

  // optional int32 checkpoint_after = 8 [default = 1000];
  if (has_checkpoint_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->checkpoint_after(), output);
  }

  // optional string checkpoint_directory = 9;
  if (has_checkpoint_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checkpoint_directory().data(), this->checkpoint_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->checkpoint_directory(), output);
  }

  // optional bool randomize = 10 [default = false];
  if (has_randomize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->randomize(), output);
  }

  // optional int32 random_seed = 11 [default = 42];
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->random_seed(), output);
  }

  // optional bool verbose = 12 [default = true];
  if (has_verbose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->verbose(), output);
  }

  // optional bool normalize_each_train_step = 13 [default = true];
  if (has_normalize_each_train_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->normalize_each_train_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1 [default = "operation"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .model.Operation.Optimizer optimizer = 2 [default = GRADIENT_DESCENT];
  if (has_optimizer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->optimizer(), target);
  }

  // optional .model.Operation.StopCondition stop_condition = 3;
  if (has_stop_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stop_condition(), target);
  }

  // optional .model.Operation.OperationType operation_type = 4 [default = TRAIN];
  if (has_operation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->operation_type(), target);
  }

  // optional int32 batch_size = 5 [default = 100];
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->batch_size(), target);
  }

  // optional string data_proto = 6;
  if (has_data_proto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_proto().data(), this->data_proto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->data_proto(), target);
  }

  // optional int32 eval_after = 7 [default = 500];
  if (has_eval_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->eval_after(), target);
  }

  // optional int32 checkpoint_after = 8 [default = 1000];
  if (has_checkpoint_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->checkpoint_after(), target);
  }

  // optional string checkpoint_directory = 9;
  if (has_checkpoint_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checkpoint_directory().data(), this->checkpoint_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->checkpoint_directory(), target);
  }

  // optional bool randomize = 10 [default = false];
  if (has_randomize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->randomize(), target);
  }

  // optional int32 random_seed = 11 [default = 42];
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->random_seed(), target);
  }

  // optional bool verbose = 12 [default = true];
  if (has_verbose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->verbose(), target);
  }

  // optional bool normalize_each_train_step = 13 [default = true];
  if (has_normalize_each_train_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->normalize_each_train_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1 [default = "operation"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .model.Operation.Optimizer optimizer = 2 [default = GRADIENT_DESCENT];
    if (has_optimizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optimizer());
    }

    // optional .model.Operation.StopCondition stop_condition = 3;
    if (has_stop_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_condition());
    }

    // optional .model.Operation.OperationType operation_type = 4 [default = TRAIN];
    if (has_operation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation_type());
    }

    // optional int32 batch_size = 5 [default = 100];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_size());
    }

    // optional string data_proto = 6;
    if (has_data_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_proto());
    }

    // optional int32 eval_after = 7 [default = 500];
    if (has_eval_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eval_after());
    }

    // optional int32 checkpoint_after = 8 [default = 1000];
    if (has_checkpoint_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_after());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string checkpoint_directory = 9;
    if (has_checkpoint_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checkpoint_directory());
    }

    // optional bool randomize = 10 [default = false];
    if (has_randomize()) {
      total_size += 1 + 1;
    }

    // optional int32 random_seed = 11 [default = 42];
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_seed());
    }

    // optional bool verbose = 12 [default = true];
    if (has_verbose()) {
      total_size += 1 + 1;
    }

    // optional bool normalize_each_train_step = 13 [default = true];
    if (has_normalize_each_train_step()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_optimizer()) {
      set_optimizer(from.optimizer());
    }
    if (from.has_stop_condition()) {
      mutable_stop_condition()->::model::Operation_StopCondition::MergeFrom(from.stop_condition());
    }
    if (from.has_operation_type()) {
      set_operation_type(from.operation_type());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_data_proto()) {
      set_data_proto(from.data_proto());
    }
    if (from.has_eval_after()) {
      set_eval_after(from.eval_after());
    }
    if (from.has_checkpoint_after()) {
      set_checkpoint_after(from.checkpoint_after());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_checkpoint_directory()) {
      set_checkpoint_directory(from.checkpoint_directory());
    }
    if (from.has_randomize()) {
      set_randomize(from.randomize());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_verbose()) {
      set_verbose(from.verbose());
    }
    if (from.has_normalize_each_train_step()) {
      set_normalize_each_train_step(from.normalize_each_train_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Operation::Swap(Operation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(optimizer_, other->optimizer_);
    std::swap(stop_condition_, other->stop_condition_);
    std::swap(operation_type_, other->operation_type_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(data_proto_, other->data_proto_);
    std::swap(eval_after_, other->eval_after_);
    std::swap(checkpoint_after_, other->checkpoint_after_);
    std::swap(checkpoint_directory_, other->checkpoint_directory_);
    std::swap(randomize_, other->randomize_);
    std::swap(random_seed_, other->random_seed_);
    std::swap(verbose_, other->verbose_);
    std::swap(normalize_each_train_step_, other->normalize_each_train_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_descriptor_;
  metadata.reflection = Operation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DatasetInfo_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetInfo_DataType_descriptor_;
}
bool DatasetInfo_DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DatasetInfo_DataType DatasetInfo::TRAIN_SET;
const DatasetInfo_DataType DatasetInfo::EVAL_SET;
const DatasetInfo_DataType DatasetInfo::TEST_SET;
const DatasetInfo_DataType DatasetInfo::DataType_MIN;
const DatasetInfo_DataType DatasetInfo::DataType_MAX;
const int DatasetInfo::DataType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DatasetInfo_DataFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetInfo_DataFormat_descriptor_;
}
bool DatasetInfo_DataFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DatasetInfo_DataFormat DatasetInfo::BOOST_MATRIX;
const DatasetInfo_DataFormat DatasetInfo::CSV;
const DatasetInfo_DataFormat DatasetInfo::DataFormat_MIN;
const DatasetInfo_DataFormat DatasetInfo::DataFormat_MAX;
const int DatasetInfo::DataFormat_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DatasetInfo::kTypeFieldNumber;
const int DatasetInfo::kFilePatternFieldNumber;
const int DatasetInfo::kSizeFieldNumber;
const int DatasetInfo::kDimensionsFieldNumber;
const int DatasetInfo::kTypeSizeFieldNumber;
const int DatasetInfo::kDataFormatFieldNumber;
#endif  // !_MSC_VER

DatasetInfo::DatasetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatasetInfo::InitAsDefaultInstance() {
}

DatasetInfo::DatasetInfo(const DatasetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatasetInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  file_pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  dimensions_ = 0;
  type_size_ = 4;
  data_format_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatasetInfo::~DatasetInfo() {
  SharedDtor();
}

void DatasetInfo::SharedDtor() {
  if (file_pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete file_pattern_;
  }
  if (this != default_instance_) {
  }
}

void DatasetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetInfo_descriptor_;
}

const DatasetInfo& DatasetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

DatasetInfo* DatasetInfo::default_instance_ = NULL;

DatasetInfo* DatasetInfo::New() const {
  return new DatasetInfo;
}

void DatasetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_file_pattern()) {
      if (file_pattern_ != &::google::protobuf::internal::kEmptyString) {
        file_pattern_->clear();
      }
    }
    size_ = 0;
    dimensions_ = 0;
    type_size_ = 4;
    data_format_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatasetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .model.DatasetInfo.DataType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::DatasetInfo_DataType_IsValid(value)) {
            set_type(static_cast< ::model::DatasetInfo_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_pattern;
        break;
      }

      // required string file_pattern = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_pattern().data(), this->file_pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dimensions;
        break;
      }

      // required int32 dimensions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimensions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimensions_)));
          set_has_dimensions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type_size;
        break;
      }

      // optional int32 type_size = 5 [default = 4];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_size_)));
          set_has_type_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_data_format;
        break;
      }

      // optional .model.DatasetInfo.DataFormat data_format = 6 [default = BOOST_MATRIX];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::DatasetInfo_DataFormat_IsValid(value)) {
            set_data_format(static_cast< ::model::DatasetInfo_DataFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatasetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .model.DatasetInfo.DataType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string file_pattern = 2;
  if (has_file_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_pattern().data(), this->file_pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_pattern(), output);
  }

  // required int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // required int32 dimensions = 4;
  if (has_dimensions()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dimensions(), output);
  }

  // optional int32 type_size = 5 [default = 4];
  if (has_type_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type_size(), output);
  }

  // optional .model.DatasetInfo.DataFormat data_format = 6 [default = BOOST_MATRIX];
  if (has_data_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->data_format(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatasetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .model.DatasetInfo.DataType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string file_pattern = 2;
  if (has_file_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_pattern().data(), this->file_pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_pattern(), target);
  }

  // required int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // required int32 dimensions = 4;
  if (has_dimensions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dimensions(), target);
  }

  // optional int32 type_size = 5 [default = 4];
  if (has_type_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type_size(), target);
  }

  // optional .model.DatasetInfo.DataFormat data_format = 6 [default = BOOST_MATRIX];
  if (has_data_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->data_format(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatasetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .model.DatasetInfo.DataType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string file_pattern = 2;
    if (has_file_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_pattern());
    }

    // required int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required int32 dimensions = 4;
    if (has_dimensions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimensions());
    }

    // optional int32 type_size = 5 [default = 4];
    if (has_type_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_size());
    }

    // optional .model.DatasetInfo.DataFormat data_format = 6 [default = BOOST_MATRIX];
    if (has_data_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_format());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatasetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatasetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatasetInfo::MergeFrom(const DatasetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_file_pattern()) {
      set_file_pattern(from.file_pattern());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_dimensions()) {
      set_dimensions(from.dimensions());
    }
    if (from.has_type_size()) {
      set_type_size(from.type_size());
    }
    if (from.has_data_format()) {
      set_data_format(from.data_format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatasetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetInfo::CopyFrom(const DatasetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DatasetInfo::Swap(DatasetInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(file_pattern_, other->file_pattern_);
    std::swap(size_, other->size_);
    std::swap(dimensions_, other->dimensions_);
    std::swap(type_size_, other->type_size_);
    std::swap(data_format_, other->data_format_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatasetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatasetInfo_descriptor_;
  metadata.reflection = DatasetInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* DatabaseInfo::_default_data_handler_ = NULL;
#ifndef _MSC_VER
const int DatabaseInfo::kNameFieldNumber;
const int DatabaseInfo::kDataFieldNumber;
const int DatabaseInfo::kDataHandlerFieldNumber;
const int DatabaseInfo::kMainMemoryFieldNumber;
const int DatabaseInfo::kGpuMemoryFieldNumber;
const int DatabaseInfo::kPathPrefixFieldNumber;
#endif  // !_MSC_VER

DatabaseInfo::DatabaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatabaseInfo::InitAsDefaultInstance() {
}

DatabaseInfo::DatabaseInfo(const DatabaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatabaseInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_handler_ = const_cast< ::std::string*>(_default_data_handler_);
  main_memory_ = 2;
  gpu_memory_ = 1.5f;
  path_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatabaseInfo::~DatabaseInfo() {
  SharedDtor();
}

void DatabaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (data_handler_ != _default_data_handler_) {
    delete data_handler_;
  }
  if (path_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete path_prefix_;
  }
  if (this != default_instance_) {
  }
}

void DatabaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatabaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatabaseInfo_descriptor_;
}

const DatabaseInfo& DatabaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

DatabaseInfo* DatabaseInfo::default_instance_ = NULL;

DatabaseInfo* DatabaseInfo::New() const {
  return new DatabaseInfo;
}

void DatabaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_data_handler()) {
      if (data_handler_ != _default_data_handler_) {
        data_handler_->assign(*_default_data_handler_);
      }
    }
    main_memory_ = 2;
    gpu_memory_ = 1.5f;
    if (has_path_prefix()) {
      if (path_prefix_ != &::google::protobuf::internal::kEmptyString) {
        path_prefix_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatabaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .model.DatasetInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectTag(26)) goto parse_data_handler;
        break;
      }

      // optional string data_handler = 3 [default = "deeplearn"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_handler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_handler()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_handler().data(), this->data_handler().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_main_memory;
        break;
      }

      // optional float main_memory = 4 [default = 2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_main_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &main_memory_)));
          set_has_main_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_gpu_memory;
        break;
      }

      // optional float gpu_memory = 5 [default = 1.5];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gpu_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpu_memory_)));
          set_has_gpu_memory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_path_prefix;
        break;
      }

      // optional string path_prefix = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path_prefix().data(), this->path_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatabaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .model.DatasetInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // optional string data_handler = 3 [default = "deeplearn"];
  if (has_data_handler()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_handler().data(), this->data_handler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data_handler(), output);
  }

  // optional float main_memory = 4 [default = 2];
  if (has_main_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->main_memory(), output);
  }

  // optional float gpu_memory = 5 [default = 1.5];
  if (has_gpu_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gpu_memory(), output);
  }

  // optional string path_prefix = 6 [default = ""];
  if (has_path_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_prefix().data(), this->path_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->path_prefix(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatabaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .model.DatasetInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // optional string data_handler = 3 [default = "deeplearn"];
  if (has_data_handler()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_handler().data(), this->data_handler().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data_handler(), target);
  }

  // optional float main_memory = 4 [default = 2];
  if (has_main_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->main_memory(), target);
  }

  // optional float gpu_memory = 5 [default = 1.5];
  if (has_gpu_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gpu_memory(), target);
  }

  // optional string path_prefix = 6 [default = ""];
  if (has_path_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_prefix().data(), this->path_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->path_prefix(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatabaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string data_handler = 3 [default = "deeplearn"];
    if (has_data_handler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_handler());
    }

    // optional float main_memory = 4 [default = 2];
    if (has_main_memory()) {
      total_size += 1 + 4;
    }

    // optional float gpu_memory = 5 [default = 1.5];
    if (has_gpu_memory()) {
      total_size += 1 + 4;
    }

    // optional string path_prefix = 6 [default = ""];
    if (has_path_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path_prefix());
    }

  }
  // repeated .model.DatasetInfo data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatabaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatabaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatabaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatabaseInfo::MergeFrom(const DatabaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data_handler()) {
      set_data_handler(from.data_handler());
    }
    if (from.has_main_memory()) {
      set_main_memory(from.main_memory());
    }
    if (from.has_gpu_memory()) {
      set_gpu_memory(from.gpu_memory());
    }
    if (from.has_path_prefix()) {
      set_path_prefix(from.path_prefix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatabaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseInfo::CopyFrom(const DatabaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void DatabaseInfo::Swap(DatabaseInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    data_.Swap(&other->data_);
    std::swap(data_handler_, other->data_handler_);
    std::swap(main_memory_, other->main_memory_);
    std::swap(gpu_memory_, other->gpu_memory_);
    std::swap(path_prefix_, other->path_prefix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatabaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatabaseInfo_descriptor_;
  metadata.reflection = DatabaseInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace model

// @@protoc_insertion_point(global_scope)
