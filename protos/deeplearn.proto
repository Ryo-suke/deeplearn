package model;

message Metric {
  enum MetricType {
    NLL = 1;        // Negative log-likelihood
    CLASSIFICATION_ERROR = 2;
  }

  required MetricType type = 1 [default=NLL];
  repeated int32 steps = 2;
  repeated float values = 3;
}

message Metrics {
  // a list of metrics, of different types of metric
  repeated Metric metrics = 1;
}

message Hyperparams {
  enum Decay {
    DECAY_NONE = 0;
    DECAY_INVERSE_T = 1;
    DECAY_EXPONENTIAL = 2;
  }
  enum BestModelCriterion {
    CRITERION_NONE = 0;
    CRITERION_NLL = 1;               // Negative Log-likehood, for SPN (generative models?)
    CRITERION_ERROR = 2;              // whatever kind of error... (depending on model type)
  }
  
  optional float base_learningrate = 1 [default=0.01];
  optional Decay learningrate_decay = 2 [default=DECAY_NONE];
  optional int32 learningrate_decay_half_life = 3 [default=1000];
  optional float initial_momentum = 4 [default=0.0];
  optional float final_momentum = 5 [default=0.0];
  optional int32 momentum_change_steps = 6 [default=10];

  optional BestModelCriterion select_model_criterion = 7 [default=CRITERION_NONE];
}

message NodeData {
  enum NodeType {
    INPUT = 0;
    HIDDEN = 1;
    QUERY = 2;
    PRODUCT = 3;
    SUM = 4;
    MAX = 5;
  }
  required string name = 1;
  required NodeType type = 2;
  required int32 dimension = 3;
  optional int32 input_start_index = 4;     // only used if type = INPUT
  optional bytes bias = 5;
  optional Hyperparams hyper_params = 6;
}

message EdgeData {
  optional bool directed = 1 [default=true];
  optional bytes weight = 2;
  optional string node1 = 3;
  optional string node2 = 4;
  optional Hyperparams hyper_params = 5;
}

message SpnLayerInit {
  required string name = 1;
  optional NodeData.NodeType type = 2;

  // for sum/max/input layers: 
  // each node has connections with all of its children
  optional int32 size = 3;

  // the maximum number of combinations of child nodes for product layers
  // should be small (2 or 3), or you will run into combinatoric problem.
  optional int32 product_combinations = 4 [default=3];

  // list of indices of input nodes. length should be equal to size.
  optional string input_indices = 5;
  // list of node types, should only be used when the nodes have different types
  optional string node_list = 6;
}

message SpnData {
  optional string node_list = 1;        // a boost::matrix of values of NodeType
  optional string adjacency_matrix = 2; // boost::matrix
  optional string input_indices = 3;    // boost::matrix of integers

  // in the bottom-up order!
  repeated SpnLayerInit layers = 4;
}

message ModelData {
  enum ModelType {
    SPN = 0;
  }
  required string name = 1;
  required ModelType model_type = 2;
  optional model.SpnData spn_data = 3;
  optional Hyperparams hyper_params = 4;
  repeated NodeData nodes = 5;
  repeated EdgeData edges = 6;
  optional Metrics train_metrics = 7;
  optional Metrics valid_metrics = 8;
  optional Metrics test_metrics = 9;

  // early-stopping results (at the configuration gives best validation metrics)
  optional Metrics valid_metric_best = 10;
  optional Metrics train_metric_es = 11;
  optional Metrics test_metric_es = 12;
}

message Operation {
  enum Optimizer {
    GRADIENT_DESCENT = 0;
    HARD_GRADIENT_DESCENT = 1;
    EM = 2;
    HARD_EM = 3;
    CD = 4;
    PCD = 5;
  }
  enum OperationType {
    TRAIN = 0;
    TEST = 1;
  }
  message StopCondition {
    optional bool all_processed = 1 [default=true];
    optional int32 steps = 2 [default=10000];
  }
  required string name = 1 [default="operation"];
  optional Optimizer optimizer = 2 [default=GRADIENT_DESCENT];
  optional StopCondition stop_condition = 3;
  optional OperationType operation_type = 4 [default=TRAIN];
  optional int32 batch_size = 5 [default=100];
  optional string data_proto = 6;
  optional int32 eval_after = 7 [default=500];
  optional int32 checkpoint_after = 8 [default=1000];
  optional string checkpoint_directory = 9;
  optional bool randomize = 10 [default=false];
  optional int32 random_seed = 11 [default=42];
  optional bool verbose = 12 [default=true];
  optional bool normalize_each_train_step = 13 [default=true];
}

message DatasetInfo {
    enum DataType {
      TRAIN_SET = 0;
      EVAL_SET = 1;
      TEST_SET = 2;
    }
    enum DataFormat {
        BOOST_MATRIX = 0;
        CSV = 1;
    }
    required DataType type = 1;
    required string file_pattern = 2;
    required int32 size = 3;        // number of instances
    required int32 dimensions = 4;
    optional int32 type_size = 5 [default=4];   // size of atomic value (in bytes)
    optional DataFormat data_format = 6 [default=BOOST_MATRIX];
}

message DatabaseInfo {
  required string name = 1;

  repeated DatasetInfo data = 2;
  optional string data_handler = 3 [default="deeplearn"];
  optional float main_memory = 4 [default=2];       // in Gigabytes
  optional float gpu_memory = 5 [default=1.5];        // in Gigabytes
  optional string path_prefix = 6 [default=""];
}
