// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deeplearn.proto

#ifndef PROTOBUF_deeplearn_2eproto__INCLUDED
#define PROTOBUF_deeplearn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace model {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_deeplearn_2eproto();
void protobuf_AssignDesc_deeplearn_2eproto();
void protobuf_ShutdownFile_deeplearn_2eproto();

class NodeData;
class SpnData;
class ModelData;

enum NodeData_NodeType {
  NodeData_NodeType_INPUT = 0,
  NodeData_NodeType_HIDDEN = 1,
  NodeData_NodeType_QUERY = 2,
  NodeData_NodeType_PRODUCT = 3,
  NodeData_NodeType_SUM = 4,
  NodeData_NodeType_MAX = 5
};
bool NodeData_NodeType_IsValid(int value);
const NodeData_NodeType NodeData_NodeType_NodeType_MIN = NodeData_NodeType_INPUT;
const NodeData_NodeType NodeData_NodeType_NodeType_MAX = NodeData_NodeType_MAX;
const int NodeData_NodeType_NodeType_ARRAYSIZE = NodeData_NodeType_NodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeData_NodeType_descriptor();
inline const ::std::string& NodeData_NodeType_Name(NodeData_NodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeData_NodeType_descriptor(), value);
}
inline bool NodeData_NodeType_Parse(
    const ::std::string& name, NodeData_NodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeData_NodeType>(
    NodeData_NodeType_descriptor(), name, value);
}
enum ModelData_ModelType {
  ModelData_ModelType_SPN = 0
};
bool ModelData_ModelType_IsValid(int value);
const ModelData_ModelType ModelData_ModelType_ModelType_MIN = ModelData_ModelType_SPN;
const ModelData_ModelType ModelData_ModelType_ModelType_MAX = ModelData_ModelType_SPN;
const int ModelData_ModelType_ModelType_ARRAYSIZE = ModelData_ModelType_ModelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ModelData_ModelType_descriptor();
inline const ::std::string& ModelData_ModelType_Name(ModelData_ModelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ModelData_ModelType_descriptor(), value);
}
inline bool ModelData_ModelType_Parse(
    const ::std::string& name, ModelData_ModelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ModelData_ModelType>(
    ModelData_ModelType_descriptor(), name, value);
}
// ===================================================================

class NodeData : public ::google::protobuf::Message {
 public:
  NodeData();
  virtual ~NodeData();

  NodeData(const NodeData& from);

  inline NodeData& operator=(const NodeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeData& default_instance();

  void Swap(NodeData* other);

  // implements Message ----------------------------------------------

  NodeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeData& from);
  void MergeFrom(const NodeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NodeData_NodeType NodeType;
  static const NodeType INPUT = NodeData_NodeType_INPUT;
  static const NodeType HIDDEN = NodeData_NodeType_HIDDEN;
  static const NodeType QUERY = NodeData_NodeType_QUERY;
  static const NodeType PRODUCT = NodeData_NodeType_PRODUCT;
  static const NodeType SUM = NodeData_NodeType_SUM;
  static const NodeType MAX = NodeData_NodeType_MAX;
  static inline bool NodeType_IsValid(int value) {
    return NodeData_NodeType_IsValid(value);
  }
  static const NodeType NodeType_MIN =
    NodeData_NodeType_NodeType_MIN;
  static const NodeType NodeType_MAX =
    NodeData_NodeType_NodeType_MAX;
  static const int NodeType_ARRAYSIZE =
    NodeData_NodeType_NodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NodeType_descriptor() {
    return NodeData_NodeType_descriptor();
  }
  static inline const ::std::string& NodeType_Name(NodeType value) {
    return NodeData_NodeType_Name(value);
  }
  static inline bool NodeType_Parse(const ::std::string& name,
      NodeType* value) {
    return NodeData_NodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .model.NodeData.NodeType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::model::NodeData_NodeType type() const;
  inline void set_type(::model::NodeData_NodeType value);

  // required int32 dimension = 3;
  inline bool has_dimension() const;
  inline void clear_dimension();
  static const int kDimensionFieldNumber = 3;
  inline ::google::protobuf::int32 dimension() const;
  inline void set_dimension(::google::protobuf::int32 value);

  // optional int32 input_start_index = 4;
  inline bool has_input_start_index() const;
  inline void clear_input_start_index();
  static const int kInputStartIndexFieldNumber = 4;
  inline ::google::protobuf::int32 input_start_index() const;
  inline void set_input_start_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:model.NodeData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dimension();
  inline void clear_has_dimension();
  inline void set_has_input_start_index();
  inline void clear_has_input_start_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int type_;
  ::google::protobuf::int32 dimension_;
  ::google::protobuf::int32 input_start_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static NodeData* default_instance_;
};
// -------------------------------------------------------------------

class SpnData : public ::google::protobuf::Message {
 public:
  SpnData();
  virtual ~SpnData();

  SpnData(const SpnData& from);

  inline SpnData& operator=(const SpnData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpnData& default_instance();

  void Swap(SpnData* other);

  // implements Message ----------------------------------------------

  SpnData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpnData& from);
  void MergeFrom(const SpnData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string node_list = 1;
  inline bool has_node_list() const;
  inline void clear_node_list();
  static const int kNodeListFieldNumber = 1;
  inline const ::std::string& node_list() const;
  inline void set_node_list(const ::std::string& value);
  inline void set_node_list(const char* value);
  inline void set_node_list(const char* value, size_t size);
  inline ::std::string* mutable_node_list();
  inline ::std::string* release_node_list();
  inline void set_allocated_node_list(::std::string* node_list);

  // optional string adjacency_matrix = 2;
  inline bool has_adjacency_matrix() const;
  inline void clear_adjacency_matrix();
  static const int kAdjacencyMatrixFieldNumber = 2;
  inline const ::std::string& adjacency_matrix() const;
  inline void set_adjacency_matrix(const ::std::string& value);
  inline void set_adjacency_matrix(const char* value);
  inline void set_adjacency_matrix(const char* value, size_t size);
  inline ::std::string* mutable_adjacency_matrix();
  inline ::std::string* release_adjacency_matrix();
  inline void set_allocated_adjacency_matrix(::std::string* adjacency_matrix);

  // optional string input_indices = 3;
  inline bool has_input_indices() const;
  inline void clear_input_indices();
  static const int kInputIndicesFieldNumber = 3;
  inline const ::std::string& input_indices() const;
  inline void set_input_indices(const ::std::string& value);
  inline void set_input_indices(const char* value);
  inline void set_input_indices(const char* value, size_t size);
  inline ::std::string* mutable_input_indices();
  inline ::std::string* release_input_indices();
  inline void set_allocated_input_indices(::std::string* input_indices);

  // @@protoc_insertion_point(class_scope:model.SpnData)
 private:
  inline void set_has_node_list();
  inline void clear_has_node_list();
  inline void set_has_adjacency_matrix();
  inline void clear_has_adjacency_matrix();
  inline void set_has_input_indices();
  inline void clear_has_input_indices();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* node_list_;
  ::std::string* adjacency_matrix_;
  ::std::string* input_indices_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static SpnData* default_instance_;
};
// -------------------------------------------------------------------

class ModelData : public ::google::protobuf::Message {
 public:
  ModelData();
  virtual ~ModelData();

  ModelData(const ModelData& from);

  inline ModelData& operator=(const ModelData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelData& default_instance();

  void Swap(ModelData* other);

  // implements Message ----------------------------------------------

  ModelData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModelData& from);
  void MergeFrom(const ModelData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ModelData_ModelType ModelType;
  static const ModelType SPN = ModelData_ModelType_SPN;
  static inline bool ModelType_IsValid(int value) {
    return ModelData_ModelType_IsValid(value);
  }
  static const ModelType ModelType_MIN =
    ModelData_ModelType_ModelType_MIN;
  static const ModelType ModelType_MAX =
    ModelData_ModelType_ModelType_MAX;
  static const int ModelType_ARRAYSIZE =
    ModelData_ModelType_ModelType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ModelType_descriptor() {
    return ModelData_ModelType_descriptor();
  }
  static inline const ::std::string& ModelType_Name(ModelType value) {
    return ModelData_ModelType_Name(value);
  }
  static inline bool ModelType_Parse(const ::std::string& name,
      ModelType* value) {
    return ModelData_ModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .model.ModelData.ModelType model_type = 2;
  inline bool has_model_type() const;
  inline void clear_model_type();
  static const int kModelTypeFieldNumber = 2;
  inline ::model::ModelData_ModelType model_type() const;
  inline void set_model_type(::model::ModelData_ModelType value);

  // optional .model.SpnData spn_data = 3;
  inline bool has_spn_data() const;
  inline void clear_spn_data();
  static const int kSpnDataFieldNumber = 3;
  inline const ::model::SpnData& spn_data() const;
  inline ::model::SpnData* mutable_spn_data();
  inline ::model::SpnData* release_spn_data();
  inline void set_allocated_spn_data(::model::SpnData* spn_data);

  // @@protoc_insertion_point(class_scope:model.ModelData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_model_type();
  inline void clear_has_model_type();
  inline void set_has_spn_data();
  inline void clear_has_spn_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::model::SpnData* spn_data_;
  int model_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_deeplearn_2eproto();
  friend void protobuf_AssignDesc_deeplearn_2eproto();
  friend void protobuf_ShutdownFile_deeplearn_2eproto();

  void InitAsDefaultInstance();
  static ModelData* default_instance_;
};
// ===================================================================


// ===================================================================

// NodeData

// required string name = 1;
inline bool NodeData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NodeData::name() const {
  return *name_;
}
inline void NodeData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NodeData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NodeData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NodeData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .model.NodeData.NodeType type = 2;
inline bool NodeData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::model::NodeData_NodeType NodeData::type() const {
  return static_cast< ::model::NodeData_NodeType >(type_);
}
inline void NodeData::set_type(::model::NodeData_NodeType value) {
  assert(::model::NodeData_NodeType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 dimension = 3;
inline bool NodeData::has_dimension() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeData::set_has_dimension() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeData::clear_has_dimension() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeData::clear_dimension() {
  dimension_ = 0;
  clear_has_dimension();
}
inline ::google::protobuf::int32 NodeData::dimension() const {
  return dimension_;
}
inline void NodeData::set_dimension(::google::protobuf::int32 value) {
  set_has_dimension();
  dimension_ = value;
}

// optional int32 input_start_index = 4;
inline bool NodeData::has_input_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeData::set_has_input_start_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeData::clear_has_input_start_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeData::clear_input_start_index() {
  input_start_index_ = 0;
  clear_has_input_start_index();
}
inline ::google::protobuf::int32 NodeData::input_start_index() const {
  return input_start_index_;
}
inline void NodeData::set_input_start_index(::google::protobuf::int32 value) {
  set_has_input_start_index();
  input_start_index_ = value;
}

// -------------------------------------------------------------------

// SpnData

// optional string node_list = 1;
inline bool SpnData::has_node_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpnData::set_has_node_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpnData::clear_has_node_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpnData::clear_node_list() {
  if (node_list_ != &::google::protobuf::internal::kEmptyString) {
    node_list_->clear();
  }
  clear_has_node_list();
}
inline const ::std::string& SpnData::node_list() const {
  return *node_list_;
}
inline void SpnData::set_node_list(const ::std::string& value) {
  set_has_node_list();
  if (node_list_ == &::google::protobuf::internal::kEmptyString) {
    node_list_ = new ::std::string;
  }
  node_list_->assign(value);
}
inline void SpnData::set_node_list(const char* value) {
  set_has_node_list();
  if (node_list_ == &::google::protobuf::internal::kEmptyString) {
    node_list_ = new ::std::string;
  }
  node_list_->assign(value);
}
inline void SpnData::set_node_list(const char* value, size_t size) {
  set_has_node_list();
  if (node_list_ == &::google::protobuf::internal::kEmptyString) {
    node_list_ = new ::std::string;
  }
  node_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpnData::mutable_node_list() {
  set_has_node_list();
  if (node_list_ == &::google::protobuf::internal::kEmptyString) {
    node_list_ = new ::std::string;
  }
  return node_list_;
}
inline ::std::string* SpnData::release_node_list() {
  clear_has_node_list();
  if (node_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = node_list_;
    node_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpnData::set_allocated_node_list(::std::string* node_list) {
  if (node_list_ != &::google::protobuf::internal::kEmptyString) {
    delete node_list_;
  }
  if (node_list) {
    set_has_node_list();
    node_list_ = node_list;
  } else {
    clear_has_node_list();
    node_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string adjacency_matrix = 2;
inline bool SpnData::has_adjacency_matrix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpnData::set_has_adjacency_matrix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpnData::clear_has_adjacency_matrix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpnData::clear_adjacency_matrix() {
  if (adjacency_matrix_ != &::google::protobuf::internal::kEmptyString) {
    adjacency_matrix_->clear();
  }
  clear_has_adjacency_matrix();
}
inline const ::std::string& SpnData::adjacency_matrix() const {
  return *adjacency_matrix_;
}
inline void SpnData::set_adjacency_matrix(const ::std::string& value) {
  set_has_adjacency_matrix();
  if (adjacency_matrix_ == &::google::protobuf::internal::kEmptyString) {
    adjacency_matrix_ = new ::std::string;
  }
  adjacency_matrix_->assign(value);
}
inline void SpnData::set_adjacency_matrix(const char* value) {
  set_has_adjacency_matrix();
  if (adjacency_matrix_ == &::google::protobuf::internal::kEmptyString) {
    adjacency_matrix_ = new ::std::string;
  }
  adjacency_matrix_->assign(value);
}
inline void SpnData::set_adjacency_matrix(const char* value, size_t size) {
  set_has_adjacency_matrix();
  if (adjacency_matrix_ == &::google::protobuf::internal::kEmptyString) {
    adjacency_matrix_ = new ::std::string;
  }
  adjacency_matrix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpnData::mutable_adjacency_matrix() {
  set_has_adjacency_matrix();
  if (adjacency_matrix_ == &::google::protobuf::internal::kEmptyString) {
    adjacency_matrix_ = new ::std::string;
  }
  return adjacency_matrix_;
}
inline ::std::string* SpnData::release_adjacency_matrix() {
  clear_has_adjacency_matrix();
  if (adjacency_matrix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adjacency_matrix_;
    adjacency_matrix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpnData::set_allocated_adjacency_matrix(::std::string* adjacency_matrix) {
  if (adjacency_matrix_ != &::google::protobuf::internal::kEmptyString) {
    delete adjacency_matrix_;
  }
  if (adjacency_matrix) {
    set_has_adjacency_matrix();
    adjacency_matrix_ = adjacency_matrix;
  } else {
    clear_has_adjacency_matrix();
    adjacency_matrix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string input_indices = 3;
inline bool SpnData::has_input_indices() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpnData::set_has_input_indices() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpnData::clear_has_input_indices() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpnData::clear_input_indices() {
  if (input_indices_ != &::google::protobuf::internal::kEmptyString) {
    input_indices_->clear();
  }
  clear_has_input_indices();
}
inline const ::std::string& SpnData::input_indices() const {
  return *input_indices_;
}
inline void SpnData::set_input_indices(const ::std::string& value) {
  set_has_input_indices();
  if (input_indices_ == &::google::protobuf::internal::kEmptyString) {
    input_indices_ = new ::std::string;
  }
  input_indices_->assign(value);
}
inline void SpnData::set_input_indices(const char* value) {
  set_has_input_indices();
  if (input_indices_ == &::google::protobuf::internal::kEmptyString) {
    input_indices_ = new ::std::string;
  }
  input_indices_->assign(value);
}
inline void SpnData::set_input_indices(const char* value, size_t size) {
  set_has_input_indices();
  if (input_indices_ == &::google::protobuf::internal::kEmptyString) {
    input_indices_ = new ::std::string;
  }
  input_indices_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SpnData::mutable_input_indices() {
  set_has_input_indices();
  if (input_indices_ == &::google::protobuf::internal::kEmptyString) {
    input_indices_ = new ::std::string;
  }
  return input_indices_;
}
inline ::std::string* SpnData::release_input_indices() {
  clear_has_input_indices();
  if (input_indices_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = input_indices_;
    input_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SpnData::set_allocated_input_indices(::std::string* input_indices) {
  if (input_indices_ != &::google::protobuf::internal::kEmptyString) {
    delete input_indices_;
  }
  if (input_indices) {
    set_has_input_indices();
    input_indices_ = input_indices;
  } else {
    clear_has_input_indices();
    input_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ModelData

// required string name = 1;
inline bool ModelData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModelData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModelData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModelData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ModelData::name() const {
  return *name_;
}
inline void ModelData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModelData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ModelData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModelData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ModelData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModelData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .model.ModelData.ModelType model_type = 2;
inline bool ModelData::has_model_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModelData::set_has_model_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModelData::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModelData::clear_model_type() {
  model_type_ = 0;
  clear_has_model_type();
}
inline ::model::ModelData_ModelType ModelData::model_type() const {
  return static_cast< ::model::ModelData_ModelType >(model_type_);
}
inline void ModelData::set_model_type(::model::ModelData_ModelType value) {
  assert(::model::ModelData_ModelType_IsValid(value));
  set_has_model_type();
  model_type_ = value;
}

// optional .model.SpnData spn_data = 3;
inline bool ModelData::has_spn_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModelData::set_has_spn_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModelData::clear_has_spn_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModelData::clear_spn_data() {
  if (spn_data_ != NULL) spn_data_->::model::SpnData::Clear();
  clear_has_spn_data();
}
inline const ::model::SpnData& ModelData::spn_data() const {
  return spn_data_ != NULL ? *spn_data_ : *default_instance_->spn_data_;
}
inline ::model::SpnData* ModelData::mutable_spn_data() {
  set_has_spn_data();
  if (spn_data_ == NULL) spn_data_ = new ::model::SpnData;
  return spn_data_;
}
inline ::model::SpnData* ModelData::release_spn_data() {
  clear_has_spn_data();
  ::model::SpnData* temp = spn_data_;
  spn_data_ = NULL;
  return temp;
}
inline void ModelData::set_allocated_spn_data(::model::SpnData* spn_data) {
  delete spn_data_;
  spn_data_ = spn_data;
  if (spn_data) {
    set_has_spn_data();
  } else {
    clear_has_spn_data();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace model

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::NodeData_NodeType>() {
  return ::model::NodeData_NodeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model::ModelData_ModelType>() {
  return ::model::ModelData_ModelType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_deeplearn_2eproto__INCLUDED
