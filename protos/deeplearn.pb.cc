// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deeplearn.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "deeplearn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace model {

namespace {

const ::google::protobuf::Descriptor* NodeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeData_NodeType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SpnData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpnData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModelData_ModelType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_deeplearn_2eproto() {
  protobuf_AddDesc_deeplearn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "deeplearn.proto");
  GOOGLE_CHECK(file != NULL);
  NodeData_descriptor_ = file->message_type(0);
  static const int NodeData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, dimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, input_start_index_),
  };
  NodeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeData_descriptor_,
      NodeData::default_instance_,
      NodeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeData));
  NodeData_NodeType_descriptor_ = NodeData_descriptor_->enum_type(0);
  SpnData_descriptor_ = file->message_type(1);
  static const int SpnData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnData, node_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnData, adjacency_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnData, input_indices_),
  };
  SpnData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpnData_descriptor_,
      SpnData::default_instance_,
      SpnData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpnData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpnData));
  ModelData_descriptor_ = file->message_type(2);
  static const int ModelData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, model_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, spn_data_),
  };
  ModelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelData_descriptor_,
      ModelData::default_instance_,
      ModelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelData));
  ModelData_ModelType_descriptor_ = ModelData_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_deeplearn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeData_descriptor_, &NodeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpnData_descriptor_, &SpnData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelData_descriptor_, &ModelData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_deeplearn_2eproto() {
  delete NodeData::default_instance_;
  delete NodeData_reflection_;
  delete SpnData::default_instance_;
  delete SpnData_reflection_;
  delete ModelData::default_instance_;
  delete ModelData_reflection_;
}

void protobuf_AddDesc_deeplearn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017deeplearn.proto\022\005model\"\273\001\n\010NodeData\022\014\n"
    "\004name\030\001 \002(\t\022&\n\004type\030\002 \002(\0162\030.model.NodeDa"
    "ta.NodeType\022\021\n\tdimension\030\003 \002(\005\022\031\n\021input_"
    "start_index\030\004 \001(\005\"K\n\010NodeType\022\t\n\005INPUT\020\000"
    "\022\n\n\006HIDDEN\020\001\022\t\n\005QUERY\020\002\022\013\n\007PRODUCT\020\003\022\007\n\003"
    "SUM\020\004\022\007\n\003MAX\020\005\"M\n\007SpnData\022\021\n\tnode_list\030\001"
    " \001(\t\022\030\n\020adjacency_matrix\030\002 \001(\t\022\025\n\rinput_"
    "indices\030\003 \001(\t\"\201\001\n\tModelData\022\014\n\004name\030\001 \002("
    "\t\022.\n\nmodel_type\030\002 \002(\0162\032.model.ModelData."
    "ModelType\022 \n\010spn_data\030\003 \001(\0132\016.model.SpnD"
    "ata\"\024\n\tModelType\022\007\n\003SPN\020\000", 425);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "deeplearn.proto", &protobuf_RegisterTypes);
  NodeData::default_instance_ = new NodeData();
  SpnData::default_instance_ = new SpnData();
  ModelData::default_instance_ = new ModelData();
  NodeData::default_instance_->InitAsDefaultInstance();
  SpnData::default_instance_->InitAsDefaultInstance();
  ModelData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_deeplearn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_deeplearn_2eproto {
  StaticDescriptorInitializer_deeplearn_2eproto() {
    protobuf_AddDesc_deeplearn_2eproto();
  }
} static_descriptor_initializer_deeplearn_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* NodeData_NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeData_NodeType_descriptor_;
}
bool NodeData_NodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NodeData_NodeType NodeData::INPUT;
const NodeData_NodeType NodeData::HIDDEN;
const NodeData_NodeType NodeData::QUERY;
const NodeData_NodeType NodeData::PRODUCT;
const NodeData_NodeType NodeData::SUM;
const NodeData_NodeType NodeData::MAX;
const NodeData_NodeType NodeData::NodeType_MIN;
const NodeData_NodeType NodeData::NodeType_MAX;
const int NodeData::NodeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NodeData::kNameFieldNumber;
const int NodeData::kTypeFieldNumber;
const int NodeData::kDimensionFieldNumber;
const int NodeData::kInputStartIndexFieldNumber;
#endif  // !_MSC_VER

NodeData::NodeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeData::InitAsDefaultInstance() {
}

NodeData::NodeData(const NodeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  dimension_ = 0;
  input_start_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeData::~NodeData() {
  SharedDtor();
}

void NodeData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeData_descriptor_;
}

const NodeData& NodeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

NodeData* NodeData::default_instance_ = NULL;

NodeData* NodeData::New() const {
  return new NodeData;
}

void NodeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    dimension_ = 0;
    input_start_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .model.NodeData.NodeType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::NodeData_NodeType_IsValid(value)) {
            set_type(static_cast< ::model::NodeData_NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dimension;
        break;
      }

      // required int32 dimension = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimension_)));
          set_has_dimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_input_start_index;
        break;
      }

      // optional int32 input_start_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_start_index_)));
          set_has_input_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .model.NodeData.NodeType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 dimension = 3;
  if (has_dimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dimension(), output);
  }

  // optional int32 input_start_index = 4;
  if (has_input_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->input_start_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .model.NodeData.NodeType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 dimension = 3;
  if (has_dimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dimension(), target);
  }

  // optional int32 input_start_index = 4;
  if (has_input_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->input_start_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .model.NodeData.NodeType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 dimension = 3;
    if (has_dimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimension());
    }

    // optional int32 input_start_index = 4;
    if (has_input_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_start_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeData::MergeFrom(const NodeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dimension()) {
      set_dimension(from.dimension());
    }
    if (from.has_input_start_index()) {
      set_input_start_index(from.input_start_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeData::CopyFrom(const NodeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NodeData::Swap(NodeData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(dimension_, other->dimension_);
    std::swap(input_start_index_, other->input_start_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeData_descriptor_;
  metadata.reflection = NodeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpnData::kNodeListFieldNumber;
const int SpnData::kAdjacencyMatrixFieldNumber;
const int SpnData::kInputIndicesFieldNumber;
#endif  // !_MSC_VER

SpnData::SpnData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpnData::InitAsDefaultInstance() {
}

SpnData::SpnData(const SpnData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpnData::SharedCtor() {
  _cached_size_ = 0;
  node_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adjacency_matrix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  input_indices_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpnData::~SpnData() {
  SharedDtor();
}

void SpnData::SharedDtor() {
  if (node_list_ != &::google::protobuf::internal::kEmptyString) {
    delete node_list_;
  }
  if (adjacency_matrix_ != &::google::protobuf::internal::kEmptyString) {
    delete adjacency_matrix_;
  }
  if (input_indices_ != &::google::protobuf::internal::kEmptyString) {
    delete input_indices_;
  }
  if (this != default_instance_) {
  }
}

void SpnData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpnData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpnData_descriptor_;
}

const SpnData& SpnData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

SpnData* SpnData::default_instance_ = NULL;

SpnData* SpnData::New() const {
  return new SpnData;
}

void SpnData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_list()) {
      if (node_list_ != &::google::protobuf::internal::kEmptyString) {
        node_list_->clear();
      }
    }
    if (has_adjacency_matrix()) {
      if (adjacency_matrix_ != &::google::protobuf::internal::kEmptyString) {
        adjacency_matrix_->clear();
      }
    }
    if (has_input_indices()) {
      if (input_indices_ != &::google::protobuf::internal::kEmptyString) {
        input_indices_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpnData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string node_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_list().data(), this->node_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_adjacency_matrix;
        break;
      }

      // optional string adjacency_matrix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adjacency_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adjacency_matrix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adjacency_matrix().data(), this->adjacency_matrix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_input_indices;
        break;
      }

      // optional string input_indices = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_indices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_indices()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input_indices().data(), this->input_indices().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpnData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string node_list = 1;
  if (has_node_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_list().data(), this->node_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_list(), output);
  }

  // optional string adjacency_matrix = 2;
  if (has_adjacency_matrix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adjacency_matrix().data(), this->adjacency_matrix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->adjacency_matrix(), output);
  }

  // optional string input_indices = 3;
  if (has_input_indices()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_indices().data(), this->input_indices().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input_indices(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpnData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string node_list = 1;
  if (has_node_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_list().data(), this->node_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_list(), target);
  }

  // optional string adjacency_matrix = 2;
  if (has_adjacency_matrix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adjacency_matrix().data(), this->adjacency_matrix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->adjacency_matrix(), target);
  }

  // optional string input_indices = 3;
  if (has_input_indices()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input_indices().data(), this->input_indices().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->input_indices(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpnData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string node_list = 1;
    if (has_node_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_list());
    }

    // optional string adjacency_matrix = 2;
    if (has_adjacency_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adjacency_matrix());
    }

    // optional string input_indices = 3;
    if (has_input_indices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_indices());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpnData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpnData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpnData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpnData::MergeFrom(const SpnData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_list()) {
      set_node_list(from.node_list());
    }
    if (from.has_adjacency_matrix()) {
      set_adjacency_matrix(from.adjacency_matrix());
    }
    if (from.has_input_indices()) {
      set_input_indices(from.input_indices());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpnData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpnData::CopyFrom(const SpnData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpnData::IsInitialized() const {

  return true;
}

void SpnData::Swap(SpnData* other) {
  if (other != this) {
    std::swap(node_list_, other->node_list_);
    std::swap(adjacency_matrix_, other->adjacency_matrix_);
    std::swap(input_indices_, other->input_indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpnData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpnData_descriptor_;
  metadata.reflection = SpnData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ModelData_ModelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelData_ModelType_descriptor_;
}
bool ModelData_ModelType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ModelData_ModelType ModelData::SPN;
const ModelData_ModelType ModelData::ModelType_MIN;
const ModelData_ModelType ModelData::ModelType_MAX;
const int ModelData::ModelType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ModelData::kNameFieldNumber;
const int ModelData::kModelTypeFieldNumber;
const int ModelData::kSpnDataFieldNumber;
#endif  // !_MSC_VER

ModelData::ModelData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelData::InitAsDefaultInstance() {
  spn_data_ = const_cast< ::model::SpnData*>(&::model::SpnData::default_instance());
}

ModelData::ModelData(const ModelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_type_ = 0;
  spn_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelData::~ModelData() {
  SharedDtor();
}

void ModelData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete spn_data_;
  }
}

void ModelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelData_descriptor_;
}

const ModelData& ModelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_deeplearn_2eproto();
  return *default_instance_;
}

ModelData* ModelData::default_instance_ = NULL;

ModelData* ModelData::New() const {
  return new ModelData;
}

void ModelData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    model_type_ = 0;
    if (has_spn_data()) {
      if (spn_data_ != NULL) spn_data_->::model::SpnData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_model_type;
        break;
      }

      // required .model.ModelData.ModelType model_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::model::ModelData_ModelType_IsValid(value)) {
            set_model_type(static_cast< ::model::ModelData_ModelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spn_data;
        break;
      }

      // optional .model.SpnData spn_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spn_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spn_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .model.ModelData.ModelType model_type = 2;
  if (has_model_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->model_type(), output);
  }

  // optional .model.SpnData spn_data = 3;
  if (has_spn_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spn_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .model.ModelData.ModelType model_type = 2;
  if (has_model_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->model_type(), target);
  }

  // optional .model.SpnData spn_data = 3;
  if (has_spn_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->spn_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .model.ModelData.ModelType model_type = 2;
    if (has_model_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->model_type());
    }

    // optional .model.SpnData spn_data = 3;
    if (has_spn_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spn_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelData::MergeFrom(const ModelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_model_type()) {
      set_model_type(from.model_type());
    }
    if (from.has_spn_data()) {
      mutable_spn_data()->::model::SpnData::MergeFrom(from.spn_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelData::CopyFrom(const ModelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ModelData::Swap(ModelData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(model_type_, other->model_type_);
    std::swap(spn_data_, other->spn_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelData_descriptor_;
  metadata.reflection = ModelData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace model

// @@protoc_insertion_point(global_scope)
